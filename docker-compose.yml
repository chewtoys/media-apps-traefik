version: '3.3'
services:
  #-----------------------------------------------------------------------------
  # MANAGEMENT
  #-----------------------------------------------------------------------------

  # traefik - reverse proxy with letsencrypt built in
  # Docs: https://doc.traefik.io/traefik/
  traefik:
    container_name: traefik
    hostname: traefik
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      apps: {}
    ports:
      - 80:80
      - 443:443
      - 8080:8080
    dns:
      - 1.1.1.1
      - 8.8.8.8
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_HOSTED_ZONE_ID=${AWS_HOSTED_ZONE_ID}
      - AWS_TTL=${AWS_TTL}
    command: # CLI arguments
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=true
      - --entryPoints.http.address=:80
      - --entryPoints.https.address=:443
        # Allow these IPs to set the X-Forwarded-* headers - Cloudflare IPs: https://www.cloudflare.com/ips/
        # If you use CloudFlare, this setup is using route53
      # - --entrypoints.https.forwardedHeaders.trustedIPs=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/12,172.64.0.0/13,131.0.72.0/22
      - --entryPoints.traefik.address=:8080
      - --api=true
      - --api.insecure=true
      - --serversTransport.insecureSkipVerify=true
      - --log=true
      - --log.level=DEBUG # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      - --accessLog=true
      - --accessLog.filePath=/config/traefik.log
      - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
      - --accessLog.filters.statusCodes=400-499
      - --providers.docker=true
      - --providers.docker.endpoint=unix:///var/run/docker.sock
      # - --providers.docker.defaultrule=Host(`{{ index .Labels "com.docker.compose.service" }}.${DOMAIN_NAME}`)
      - --providers.docker.exposedByDefault=false
      - --providers.docker.network=apps
      - --providers.docker.swarmMode=false
      # Load dynamic configuration from one or more .toml or .yml files in a directory.
      - --providers.file.directory=/config/rules
      # Load dynamic configuration from a file.
      #      - --providers.file.filename=/path/to/file
      # Only works on top level files in the rules folder
      - --providers.file.watch=true
      # LetsEncrypt Staging Server - uncomment when testing
      - --certificatesResolvers.letsencrypt.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory
      - --certificatesResolvers.letsencrypt.acme.email=${ACME_EMAIL}
      - --certificatesResolvers.letsencrypt.acme.storage=/config/acme.json
      - --certificatesResolvers.letsencrypt.acme.dnsChallenge.provider=${DNS_PLUGIN}
      - --certificatesResolvers.letsencrypt.acme.dnsChallenge.resolvers=1.1.1.1:53,8.8.8.8:53
    labels:
      - traefik.enable=true
      # HTTP-to-HTTPS Redirect
      - traefik.http.routers.http-catchall.entrypoints=http
      - traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)
      - traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https
      - traefik.http.routers.http-catchall.middlewares=redirect-to-https
      # HTTP Routers
      - traefik.http.routers.traefik-rtr.entrypoints=https
      - traefik.http.routers.traefik-rtr.rule=Host(`traefik.${DOMAIN_NAME}`)
      - traefik.http.routers.traefik-rtr.tls=true
      - traefik.http.routers.traefik-rtr.tls.certresolver=letsencrypt
      - traefik.http.routers.traefik-rtr.tls.domains[0].main=${DOMAIN_NAME}
      - traefik.http.routers.traefik-rtr.tls.domains[0].sans=*.${DOMAIN_NAME}
      ## Services - API
      - traefik.http.routers.traefik-rtr.service=api@internal
      ## Middlewares
      - traefik.http.routers.traefik-rtr.middlewares=chain-authelia@file
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - ${DOCKER_DIR}/traefik:/config
    image: traefik:latest

  # redis - session database (more performance)
  # default run PUID is 1001 and PGID is root(0)
  # cant seem to change it, folder permissions need to be set accordingly
  authredis:
    container_name: authredis
    hostname: authredis
    restart: unless-stopped
    networks:
      apps: {}
    environment:
      - TZ=${TZ}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - ${DOCKER_DIR}/authredis:/bitnami/redis/data
      - ${DOCKER_DIR}/authredis/redis.conf:/opt/bitnami/redis/mounted-etc/redis.conf
    secrets:
      - redis
    command: /opt/bitnami/scripts/redis/run.sh --requirepass ${REDIS_PASSWORD}
    image: bitnami/redis:latest

  # mariadb - used for authelia storage
  authmariadb:
    container_name: authmariadb
    hostname: authmariadb
    restart: unless-stopped
    networks:
      apps: {}
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK_SET=022
      - UMASK=022
      - FILE__MYSQL_ROOT_PASSWORD=/run/secrets/mysql_root
      - FILE__MYSQL_PASSWORD=/run/secrets/mysql
      - MYSQL_DATABASE=authelia
      - MYSQL_USER=authelia
    secrets:
      - mysql
      - mysql_root
    volumes:
      - ${DOCKER_DIR}/authmariadb:/config
    image: ghcr.io/linuxserver/mariadb:latest

  # Authelia - Self-Hosted Single Sign-On and Two-Factor Authentication
  authelia:
    container_name: authelia
    hostname: authelia
    restart: unless-stopped
    networks:
      apps: {}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/authelia:/config
    environment:
      - TZ=${TZ}
      - AUTHELIA_JWT_SECRET_FILE=/run/secrets/jwt
      - AUTHELIA_SESSION_SECRET_FILE=/run/secrets/session
      - AUTHELIA_STORAGE_MYSQL_PASSWORD_FILE=/run/secrets/mysql
      - AUTHELIA_NOTIFIER_SMTP_PASSWORD_FILE=/run/secrets/smtp
      - AUTHELIA_DUO_API_SECRET_KEY_FILE=/run/secrets/duo
      - AUTHELIA_SESSION_REDIS_PASSWORD_FILE=/run/secrets/redis
      - AUTHELIA_STORAGE_POSTGRES_PASSWORD_FILE=/run/secrets/postgress
      - AUTHELIA_AUTHENTICATION_BACKEND_LDAP_PASSWORD_FILE=/run/secrets/ldap
    labels:
      - traefik.enable=true
      ## HTTP Routers
      - traefik.http.routers.authelia-rtr.entrypoints=https
      - traefik.http.routers.authelia-rtr.rule=Host(`${DOMAIN_NAME}`) && PathPrefix(`/authelia`)
      - traefik.http.routers.authelia-rtr.tls.certresolver=letsencrypt
      ## Middlewares
      - traefik.http.routers.authelia-rtr.middlewares=chain-authelia@file
      ## HTTP Services
      - traefik.http.services.authelia-svc.loadbalancer.server.port=9091
      - traefik.http.routers.authelia-rtr.service=authelia-svc
    secrets:
      - jwt
      - session
      - mysql
      - smtp
      - duo
      - redis
      - postgress
      - ldap
    depends_on:
      - authredis
      - authmariadb
    image: authelia/authelia:4.21.0

  # portainer - container management frontend
  # - view logs
  # - restart containers
  # - connect to container shell (if available)
  # - see configuration
  portainer:
    container_name: portainer
    hostname: portainer
    restart: unless-stopped
    networks:
      apps: {}
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - ${DOCKER_DIR}/portainer:/data
    labels:
      - traefik.enable=true
      ## HTTP Routers
      - traefik.http.routers.portainer-rtr.entrypoints=https
      - traefik.http.routers.portainer-rtr.rule=Host(`portainer.${DOMAIN_NAME}`)
      - traefik.http.routers.portainer-rtr.tls.certresolver=letsencrypt
      ## HTTP Services
      - traefik.http.services.portainer-svc.loadbalancer.server.port=9000
      - traefik.http.routers.portainer-rtr.service=portainer-svc
      ## Middlewares
      - traefik.http.routers.portainer-rtr.middlewares=chain-authelia@file
    image: portainer/portainer-ce:latest

networks:
  apps:
    driver: bridge
    ipam:
      config:
        - subnet: 172.22.0.0/24

volumes:
  # LOCAL Mounts
  downloads:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ${LOCAL_DL_DIR}

  data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ${DATA_DIR}

secrets:
  acme_email:
    file: ${SECRETS_DIR}/acme_email
  calibre_user:
    file: ${SECRETS_DIR}/calibre_user
  calibre_pass:
    file: ${SECRETS_DIR}/calibre_pass
  jwt:
    file: ${SECRETS_DIR}/jwt
  session:
    file: ${SECRETS_DIR}/session
  mysql:
    file: ${SECRETS_DIR}/mysql
  mysql_root:
    file: ${SECRETS_DIR}/mysql_root
  smtp:
    file: ${SECRETS_DIR}/smtp
  duo:
    file: ${SECRETS_DIR}/duo
  plex_claim:
    file: ${SECRETS_DIR}/plex_claim
  plex_4k_claim:
    file: ${SECRETS_DIR}/plex_4k_claim
  redis:
    file: ${SECRETS_DIR}/redis
  postgress:
    file: ${SECRETS_DIR}/postgress
  ldap:
    file: ${SECRETS_DIR}/ldap
  authmariadb_root_password:
    file: ${SECRETS_DIR}/authmariadb_root_password
  maxminddb:
    file: ${SECRETS_DIR}/maxminddb
