version: '3.3'
services:
  #-----------------------------------------------------------------------------
  # MANAGEMENT
  #-----------------------------------------------------------------------------

  # swag - reverse proxy with letsencrypt built in
  # Docs: https://github.com/linuxserver/docker-swag
  swag:
    container_name: swag
    hostname: swag
    restart: unless-stopped
    cap_add:
      - NET_ADMIN
    networks:
      apps: {}
    ports:
      - 80:80
      - 443:443
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
      - URL=${DOMAIN_NAME}
      - SUBDOMAINS=wildcard
      - DNSPLUGIN=${DNS_PLUGIN}
      - VALIDATION=dns
      - EMAIL=${ACME_EMAIL}
      - ONLY_SUBDOMAINS=false
      - STAGING=false
    volumes:
      - '/etc/localtime:/etc/localtime:ro'
      - '${DOCKER_DIR}/swag:/config'
    image: linuxserver/swag:latest

  # redis - session database (more performance)
  authredis:
    container_name: authredis
    hostname: authredis
    restart: unless-stopped
    networks:
      apps: {}
    volumes:
      - ${DOCKER_DIR}/authredis:/bitnami/redis/data
      - ${DOCKER_DIR}/authredis/redis.conf:/opt/bitnami/redis/mounted-etc/redis.conf
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    secrets:
      - redis
    command: /opt/bitnami/scripts/redis/run.sh --requirepass ${REDIS_PASSWORD}
    image: bitnami/redis:latest

  # mariadb - used for authelia storage
  authmariadb:
    container_name: authmariadb
    hostname: authmariadb
    restart: unless-stopped
    networks:
      apps: {}
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK_SET=022
      - UMASK=022
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_DATABASE=authelia
      - MYSQL_USER=authelia
    volumes:
      - ${DOCKER_DIR}/authmariadb:/config
    image: linuxserver/mariadb:latest

  # Authelia - Self-Hosted Single Sign-On and Two-Factor Authentication
  authelia:
    container_name: authelia
    hostname: authelia
    restart: unless-stopped
    networks:
      apps: {}
    volumes:
      - '/etc/localtime:/etc/localtime:ro'
      - ${DOCKER_DIR}/authelia:/config
    environment:
      - 'TZ=${TZ}'
      - AUTHELIA_JWT_SECRET_FILE=/run/secrets/jwt
      - AUTHELIA_SESSION_SECRET_FILE=/run/secrets/session
      - AUTHELIA_STORAGE_MYSQL_PASSWORD_FILE=/run/secrets/mysql
      - AUTHELIA_NOTIFIER_SMTP_PASSWORD_FILE=/run/secrets/smtp
      - AUTHELIA_DUO_API_SECRET_KEY_FILE=/run/secrets/duo
      - AUTHELIA_SESSION_REDIS_PASSWORD_FILE=/run/secrets/redis
      - AUTHELIA_STORAGE_POSTGRES_PASSWORD_FILE=/run/secrets/postgress
      - AUTHELIA_AUTHENTICATION_BACKEND_LDAP_PASSWORD_FILE=/run/secrets/ldap
    secrets:
      - jwt
      - session
      - mysql
      - smtp
      - duo
      - redis
      - postgress
      - ldap
    image: authelia/authelia:4.21.0

  # portainer - container management frontend
  # - view logs
  # - restart containers
  # - connect to container shell (if available)
  # - see configuration
  portainer:
    container_name: portainer
    hostname: portainer
    restart: unless-stopped
    networks:
      apps: {}
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - '/etc/localtime:/etc/localtime:ro'
      - '/var/run/docker.sock:/var/run/docker.sock'
      - '${DOCKER_DIR}/portainer:/data'
    image: portainer/portainer-ce:latest

  #-----------------------------------------------------------------------------
  # MEDIA
  #-----------------------------------------------------------------------------

  # plex - media server
  # Docs: https://hotio.dev/containers/plex/
  plex:
    container_name: plex
    hostname: plex
    restart: unless-stopped
    networks:
      apps: {}
    ports:
      - '32400:32400/tcp'
    environment:
      - TZ=${TZ}
      - PLEX_UID=${PUID}
      - PLEX_GID=${PGID}
      - PUID=${PUID}
      - PGID=${PGID}
      - PLEX_CLAIM=${PLEX_CLAIM}
      - ADVERTISE_IP=${PLEX_ADVERTISE_IP}
    volumes:
      - '/etc/localtime:/etc/localtime:ro'
      - '${DOCKER_DIR}/plex:/config'
      - '${DOCKER_DIR}/plex-transcode:/transcode'
      - '${DATA_DIR}/media/TV:/TV'
      - '${DATA_DIR}/media/Movies:/Movies'
      - '${DATA_DIR}/media/Music:/Music'
    image: hotio/plex:autoscan

  # plex - media server
  # Docs: https://hotio.dev/containers/plex/
  plex-4k:
    container_name: plex-4k
    hostname: plex-4k
    restart: unless-stopped
    networks:
      apps: {}
    ports:
      - '32401:32400/tcp'
    environment:
      - TZ=${TZ}
      - PLEX_UID=${PUID}
      - PLEX_GID=${PGID}
      - PUID=${PUID}
      - PGID=${PGID}
      - PLEX_CLAIM=${PLEX_CLAIM}
      - ADVERTISE_IP=${PLEX_ADVERTISE_IP}
    volumes:
      - '/etc/localtime:/etc/localtime:ro'
      - '${DOCKER_DIR}/plex-4k:/config'
      - '${DOCKER_DIR}/plex-4k-transcode:/transcode'
      - '${DATA_DIR}/media/TV-4K:/TV-4K'
      - '${DATA_DIR}/media/Movies-4K:/Movies-4K'
    image: hotio/plex:autoscan

  # tautulli - plex monitor
  # Docs: https://hotio.dev/containers/tautulli/
  tautulli:
    container_name: tautulli
    hostname: tautulli
    restart: unless-stopped
    networks:
      apps: {}
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
      - UMASK=022
    volumes:
      - '/etc/localtime:/etc/localtime:ro'
      - '${DOCKER_DIR}/tautulli:/config'
    image: hotio/tautulli:latest

  # tautulli - plex monitor
  # Docs: https://hotio.dev/containers/tautulli/
  tautulli-4k:
    container_name: tautulli-4k
    hostname: tautulli-4k
    restart: unless-stopped
    networks:
      apps: {}
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
      - UMASK=022
    volumes:
      - '/etc/localtime:/etc/localtime:ro'
      - '${DOCKER_DIR}/tautulli-4k:/config'
    image: hotio/tautulli:latest

  # kitana - plex plugin middleware (frontend)
  # Docs: https://github.com/pannal/Kitana
  kitana:
    container_name: kitana
    hostname: kitana
    restart: unless-stopped
    networks:
      apps: {}
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
    links:
      - plex
    command: -B 0.0.0.0:31337 -p /kitana -P
    volumes:
      - '/etc/localtime:/etc/localtime:ro'
      - '${DOCKER_DIR}/kitana:/app/data'
    image: pannal/kitana:latest

  # sabnzbd - usenet downloader written in python (easynews)
  # Docs: https://hotio.dev/containers/sabnzbd/
  sabnzbd:
    container_name: sabnzbd
    hostname: sabnzbd
    restart: unless-stopped
    networks:
      apps: {}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - '/etc/localtime:/etc/localtime:ro'
      - '${DOCKER_DIR}/sabnzbd:/config'
      - '${DATA_DIR}:/data'
    image: hotio/sabnzbd:latest

  # nzbget - usenet downloader written in C++ (easynews)
  # Docs: https://hotio.dev/containers/nzbget/
  nzbget:
    container_name: nzbget
    hostname: nzbget
    restart: unless-stopped
    networks:
      apps: {}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - '/etc/localtime:/etc/localtime:ro'
      - '${DOCKER_DIR}/nzbget:/config'
      - '${DATA_DIR}:/data'
    image: hotio/nzbget:latest

  # qbittorrent - torrent download client with VPN built in
  # Docs: https://github.com/binhex/arch-qbittorrentvpn
  # Read the documentaton on proper setup of either wireguard or openvpn
  # This template is setup for wireguard
  qbittorrent:
    container_name: qbittorrent
    hostname: qbittorrent
    restart: unless-stopped
    privileged: true
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
    networks:
      apps: {}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
      # change below subnet to whatever you configure your docker network to
      - LAN_NETWORK=172.20.0.0/16
      - WEBUI_PORT=8080
      - VPN_ENABLED=yes
      - VPN_PROV=pia
      # options below are openvpn or wireguard (I like wireguard)
      - VPN_CLIENT=wireguard
      - STRICT_PORT_FORWARD=yes
      - ENABLE_PRIVOXY=no
      - DEBUG=no
      - NAME_SERVERS=209.222.18.222,84.200.69.80,37.235.1.174,1.1.1.1,209.222.18.218,37.235.1.177
      - VPN_USER=${PIA_USERNAME}
      - VPN_PASS=${PIA_PASSWORD}
    volumes:
      - '/etc/localtime:/etc/localtime:ro'
      - '${DOCKER_DIR}/qbittorrent:/config'
      - '${DATA_DIR}:/data'
    image: 'binhex/arch-qbittorrentvpn:latest'

  # deluge - torrent download client with VPN built in
  # Docs: https://github.com/binhex/arch-delugevpn
  # Read the documentaton on proper setup of either wireguard or openvpn
  # This template is setup for wireguard
  deluge:
    container_name: deluge
    hostname: deluge
    restart: unless-stopped
    privileged: true
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
    networks:
      apps: {}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
      # change below subnet to whatever you configure your docker network to
      - LAN_NETWORK=172.20.0.0/16
      - VPN_ENABLED=yes
      - VPN_PROV=pia
      # options below are openvpn or wireguard (I like wireguard)
      - VPN_CLIENT=wireguard
      - STRICT_PORT_FORWARD=yes
      - ENABLE_PRIVOXY=no
      - DEBUG=no
      - NAME_SERVERS=209.222.18.222,84.200.69.80,37.235.1.174,1.1.1.1,209.222.18.218,37.235.1.177
      - VPN_USER=${PIA_USERNAME}
      - VPN_PASS=${PIA_PASSWORD}
    volumes:
      - '/etc/localtime:/etc/localtime:ro'
      - '${DOCKER_DIR}/deluge:/config'
      - '${DATA_DIR}:/data'
    image: 'binhex/arch-delugevpn:latest'

  # jackett - nzb torsnab proxy
  # used to aggregate torrent indexers to use with nzbhydra, sonarr and others
  # Docs: https://hotio.dev/containers/jackett/
  jackett:
    container_name: jackett
    hostname: jackett
    restart: unless-stopped
    networks:
      apps: {}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - '${DOCKER_DIR}/jackett:/config'
      - '${DATA_DIR}/downloads/torrents/queue:/torrents'
    image: hotio/jackett:latest

  # nzbhydra2 - usenet and torsnab indexer proxy
  # Docs: https://hotio.dev/containers/nzbhydra2/
  nzbhydra2:
    container_name: nzbhydra2
    hostname: nzbhydra2
    restart: unless-stopped
    networks:
      apps: {}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - '/etc/localtime:/etc/localtime:ro'
      - '${DOCKER_DIR}/nzbhydra2:/config'
      - '${DATA_DIR}/downloads/torrents:/torrents'
      - '${DATA_DIR}/downloads/nzb:/nzb'
    image: hotio/nzbhydra2:testing

  # bazarr - automatic download subtitles
  # Docs: https://hotio.dev/containers/bazarr/
  bazarr:
    container_name: bazarr
    hostname: bazarr
    restart: unless-stopped
    networks:
      apps: {}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - '/etc/localtime:/etc/localtime:ro'
      - '${DOCKER_DIR}/bazarr:/config'
      - '${DATA_DIR}/media/TV:/TV'
      - '${DATA_DIR}/media/TV:/Movies'
    image: hotio/bazarr:nightly

  # bazarr - automatic download subtitles
  # Docs: https://hotio.dev/containers/bazarr/
  bazarr-4k:
    container_name: bazarr-4k
    hostname: bazarr-4k
    restart: unless-stopped
    networks:
      apps: {}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - '/etc/localtime:/etc/localtime:ro'
      - '${DOCKER_DIR}/bazarr-4k:/config'
      - '${DATA_DIR}/media/TV-4K:/TV-4K'
      - '${DATA_DIR}/media/TV-4K:/Movies-4K'
    image: hotio/bazarr:nightly

  # sonarr - TV Shows
  # Docs: https://hotio.dev/containers/sonarr/
  sonarr:
    container_name: sonarr
    hostname: sonarr
    restart: unless-stopped
    networks:
      apps: {}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - '${DOCKER_DIR}/sonarr:/config'
      - '${DATA_DIR}:/data'
    image: hotio/sonarr:nightly

  # sonarr - TV Shows
  # Docs: https://hotio.dev/containers/sonarr/
  sonarr-4k:
    container_name: sonarr-4k
    hostname: sonarr-4k
    restart: unless-stopped
    networks:
      apps: {}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - '${DOCKER_DIR}/sonarr-4k:/config'
      - '${DATA_DIR}:/data'
    image: hotio/sonarr:nightly

  # whoami - simple service that returns PC information from where it was accessed.
  # this is being used to keep apex domain alive
  whoami:
    container_name: whoami
    hostname: whoami
    networks:
      apps: {}
    environment:
      - 'TZ=${TZ}'
    volumes:
      - '/etc/localtime:/etc/localtime:ro'
    image: traefik/whoami

networks:
  apps:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

secrets:
  jwt:
    file: ${SECRETS_DIR}/jwt
  session:
    file: ${SECRETS_DIR}/session
  mysql:
    file: ${SECRETS_DIR}/mysql
  smtp:
    file: ${SECRETS_DIR}/smtp
  duo:
    file: ${SECRETS_DIR}/duo
  redis:
    file: ${SECRETS_DIR}/redis
  postgress:
    file: ${SECRETS_DIR}/postgress
  ldap:
    file: ${SECRETS_DIR}/ldap
  authmariadb_root_password:
    file: ${SECRETS_DIR}/authmariadb_root_password
