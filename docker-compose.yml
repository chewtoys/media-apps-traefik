services:
  #-----------------------------------------------------------------------------
  # MANAGEMENT
  #-----------------------------------------------------------------------------

  # traefik - reverse proxy with letsencrypt built in
  # Docs: https://doc.traefik.io/traefik/
  traefik:
    container_name: traefik
    hostname: traefik
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      apps: {}
    ports:
      - 80:80
      - 443:443
    dns:
      - 1.1.1.1
      - 1.0.0.1
    logging:
      driver: json-file
      options:
        max-file: ${DOCKERLOGGING_MAXFILE}
        max-size: ${DOCKERLOGGING_MAXSIZE}
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
      # ------------------------------------------------------------------------
      - CLOUDFLARE_API_KEY=${CLOUDFLARE_API_KEY}
      - CLOUDFLARE_EMAIL=${CLOUDFLARE_EMAIL}
      # ------------------------------------------------------------------------
    command: # CLI arguments
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=true
      - --entryPoints.http.address=:80
      - --entryPoints.https.address=:443
      # ------------------------------------------------------------------------
      # Allow these IPs to set the X-Forwarded-* headers - Cloudflare IPs: https://www.cloudflare.com/ips/
      - --entrypoints.https.forwardedHeaders.trustedIPs=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/13,104.24.0.0/14,172.64.0.0/13,131.0.72.0/22
      # ------------------------------------------------------------------------
      - --entryPoints.traefik.address=:8080
      - --api=true
      - --serversTransport.insecureSkipVerify=true
      - --log=true
      # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      - --log.level=INFO
      - --accessLog=true
      - --accessLog.filePath=/config/traefik.log
      - --accessLog.bufferingSize=100
      - --accessLog.filters.statusCodes=400-499
      - --providers.docker=true
      - --providers.docker.endpoint=unix:///var/run/docker.sock
      - --providers.docker.defaultrule=Host(`{{ index .Labels "com.docker.compose.service" }}.${DOMAIN_NAME}`)
      - --providers.docker.exposedByDefault=false
      - --providers.docker.network=media-apps_apps
      - --providers.docker.swarmMode=false
      - --providers.file.watch=true
      - --providers.file.directory=/config/rules
      # ------------------------------------------------------------------------
      # LetsEncrypt Staging Server - uncomment when testing
      # - --certificatesResolvers.letsencrypt.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory
      # ------------------------------------------------------------------------
      - --certificatesResolvers.letsencrypt.acme.email=${ACME_EMAIL}
      - --certificatesResolvers.letsencrypt.acme.storage=/config/acme.json
      - --certificatesResolvers.letsencrypt.acme.dnsChallenge.provider=${DNS_PROVIDER}
      - --certificatesresolvers.letsencrypt.acme.dnschallenge.delaybeforecheck=0
      # ------------------------------------------------------------------------
      # must use manual resolvers when using docker-compose otherwise validation fails
      - --certificatesResolvers.letsencrypt.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53
      # ------------------------------------------------------------------------
    labels:
      - traefik.enable=true
      - traefik.http.routers.http-catchall.entrypoints=https
      - traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)
      - traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https
      - traefik.http.routers.http-catchall.middlewares=redirect-to-https
      - traefik.http.routers.traefik.tls=true
      - traefik.http.routers.traefik.entrypoints=https
      - traefik.http.routers.traefik.tls.certresolver=letsencrypt
      - traefik.http.routers.traefik.rule=Host(`traefik.${DOMAIN_NAME}`)
      - traefik.http.routers.traefik.tls.domains[0].main=${DOMAIN_NAME}
      - traefik.http.routers.traefik.tls.domains[0].sans=*.${DOMAIN_NAME}
      - traefik.http.routers.traefik.service=api@internal
      - traefik.http.routers.traefik.middlewares=rate-limit@docker,secure-headers@docker,authelia@docker
      # ------------------------------------------------------------------------
      - traefik.http.middlewares.rate-limit.rateLimit.average=100
      - traefik.http.middlewares.rate-limit.rateLimit.burst=50
      # ------------------------------------------------------------------------
      - traefik.http.middlewares.secure-headers.headers.frameDeny=true
      - traefik.http.middlewares.secure-headers.headers.stsIncludeSubdomains=true
      - traefik.http.middlewares.secure-headers.headers.stsPreload=true
      - traefik.http.middlewares.secure-headers.headers.stsSeconds=63072000
      - traefik.http.middlewares.secure-headers.headers.contentTypeNosniff=true
      - traefik.http.middlewares.secure-headers.headers.accessControlAllowMethods=GET, POST
      - traefik.http.middlewares.secure-headers.headers.accessControlAllowOriginList=https://${DOMAIN_NAME}, https://www.${DOMAIN_NAME}
      - traefik.http.middlewares.secure-headers.headers.accessControlMaxAge=100
      - traefik.http.middlewares.secure-headers.headers.addVaryheader=true
      - traefik.http.middlewares.secure-headers.headers.contentSecurityPolicy=script-src 'self'
      - traefik.http.middlewares.secure-headers.headers.referrerPolicy=origin-when-cross-origin
      # ------------------------------------------------------------------------
      # AUTHELIA
      # ------------------------------------------------------------------------
      - traefik.http.middlewares.authelia.forwardauth.address=http://authelia:9091/api/verify?rd=https://auth.${DOMAIN_NAME}/
      - traefik.http.middlewares.authelia.forwardauth.trustForwardHeader=true
      - traefik.http.middlewares.authelia.forwardauth.authResponseHeaders=Remote-User,Remote-Groups,Remote-Name,Remote-Email
      - traefik.http.middlewares.authelia-basic.forwardauth.address=http://authelia:9091/api/verify?auth=basic
      - traefik.http.middlewares.authelia-basic.forwardauth.trustForwardHeader=true
      - traefik.http.middlewares.authelia-basic.forwardauth.authResponseHeaders=Remote-User, Remote-Groups, Remote-Name, Remote-Email
      # ------------------------------------------------------------------------
      # PULLIO
      # ------------------------------------------------------------------------
      - org.hotio.pullio.notify=true
      - org.hotio.pullio.update=true
      - org.hotio.pullio.generic.webhook=https://notifiarr.com/api/v1/notification/pullio/${PULLIO_API_KEY}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - ${DOCKER_DIR}/traefik:/config
    image: traefik:latest

  # redis - session database (more performance)
  # default run PUID is 1001 and PGID is root(0)
  # cant seem to change it, folder permissions need to be set accordingly
  authredis:
    container_name: authredis
    restart: unless-stopped
    networks:
      apps: {}
    logging:
      driver: json-file
      options:
        max-file: ${DOCKERLOGGING_MAXFILE}
        max-size: ${DOCKERLOGGING_MAXSIZE}
    environment:
      - TZ=${TZ}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    labels:
      # ------------------------------------------------------------------------
      # PULLIO
      # ------------------------------------------------------------------------
      - org.hotio.pullio.notify=true
      - org.hotio.pullio.update=true
      - org.hotio.pullio.generic.webhook=https://notifiarr.com/api/v1/notification/pullio/${PULLIO_API_KEY}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/authredis:/bitnami/redis/data
      - ${DOCKER_DIR}/authredis/redis.conf:/opt/bitnami/redis/mounted-etc/redis.conf
    secrets:
      - redis_secret
    command: /opt/bitnami/scripts/redis/run.sh --requirepass ${REDIS_PASSWORD}
    image: bitnami/redis:latest

  # mariadb - used for authelia storage
  authmariadb:
    container_name: authmariadb
    restart: unless-stopped
    networks:
      apps: {}
    logging:
      driver: json-file
      options:
        max-file: ${DOCKERLOGGING_MAXFILE}
        max-size: ${DOCKERLOGGING_MAXSIZE}
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK_SET=022
      - UMASK=022
      - FILE__MYSQL_ROOT_PASSWORD=/run/secrets/mysql_root_secret
      - FILE__MYSQL_PASSWORD=/run/secrets/mysql_secret
      - MYSQL_DATABASE=authelia
      - MYSQL_USER=authelia
    labels:
      # ------------------------------------------------------------------------
      # PULLIO
      # ------------------------------------------------------------------------
      - org.hotio.pullio.notify=true
      - org.hotio.pullio.update=true
      - org.hotio.pullio.generic.webhook=https://notifiarr.com/api/v1/notification/pullio/${PULLIO_API_KEY}
    secrets:
      - mysql_secret
      - mysql_root_secret
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/authmariadb:/config
    image: ghcr.io/linuxserver/mariadb:latest

  # Authelia - Self-Hosted Single Sign-On and Two-Factor Authentication
  # Docs: https://www.authelia.com/docs/
  authelia:
    container_name: authelia
    hostname: authelia
    restart: unless-stopped
    networks:
      apps: {}
    logging:
      driver: json-file
      options:
        max-file: ${DOCKERLOGGING_MAXFILE}
        max-size: ${DOCKERLOGGING_MAXSIZE}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/authelia:/config
    environment:
      - TZ=${TZ}
      - AUTHELIA_JWT_SECRET_FILE=/run/secrets/jwt_secret
      - AUTHELIA_SESSION_SECRET_FILE=/run/secrets/local_session_secret
      - AUTHELIA_STORAGE_MYSQL_PASSWORD_FILE=/run/secrets/mysql_secret
      - AUTHELIA_NOTIFIER_SMTP_PASSWORD_FILE=/run/secrets/notifier_smtp_secret
      - AUTHELIA_DUO_API_SECRET_KEY_FILE=/run/secrets/duo_api_secret
      - AUTHELIA_SESSION_REDIS_PASSWORD_FILE=/run/secrets/redis_secret
      # - AUTHELIA_STORAGE_POSTGRES_PASSWORD_FILE=/run/secrets/postgres_secret
      # - AUTHELIA_AUTHENTICATION_BACKEND_LDAP_PASSWORD_FILE=/run/secrets/ldap_secret
    labels:
      - traefik.enable=true
      - traefik.http.routers.authelia.entrypoints=https
      - traefik.http.routers.authelia.tls=true
      - traefik.http.routers.authelia.rule=Host(`auth.${DOMAIN_NAME}`) || (Host(`${DOMAIN_NAME}`) && PathPrefix(`/auth`))
      - traefik.http.services.authelia.loadbalancer.server.port=9091
      - traefik.http.routers.authelia.service=authelia
      # ------------------------------------------------------------------------
      # PULLIO
      # ------------------------------------------------------------------------
      - org.hotio.pullio.notify=true
      - org.hotio.pullio.update=true
      - org.hotio.pullio.generic.webhook=https://notifiarr.com/api/v1/notification/pullio/${PULLIO_API_KEY}
    secrets:
      - jwt_secret
      - local_session_secret
      - mysql_secret
      - notifier_smtp_secret
      - duo_api_secret
      - redis_secret
      - postgres_secret
      - ldap_secret
    depends_on:
      - authredis
      - authmariadb
      - traefik
    image: authelia/authelia:latest

  # organizr - WebApp portal for bookmarks, prevents multiple tabs
  # mostly used for sonarr and the like
  # docs: https://hub.docker.com/r/organizr/organizr
  organizr:
    container_name: organizr
    hostname: organizr
    restart: unless-stopped
    networks:
      apps: {}
    logging:
      driver: json-file
      options:
        max-file: ${DOCKERLOGGING_MAXFILE}
        max-size: ${DOCKERLOGGING_MAXSIZE}
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - fpm=true
      - branch=v2-develop
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/organizr:/config
    labels:
      - traefik.enable=true
      - traefik.http.routers.organizr.entrypoints=https
      - traefik.http.routers.organizr.tls=true
      - traefik.http.routers.organizr.rule=Host(`www.${DOMAIN_NAME}`) || Host(`organizr.${DOMAIN_NAME}`)
      - traefik.http.services.organizr.loadbalancer.server.port=80
      - traefik.http.routers.organizr.service=organizr
      - traefik.http.routers.organizr.middlewares=rate-limit@docker,secure-headers@docker,authelia@docker
      # ------------------------------------------------------------------------
      # PULLIO
      # ------------------------------------------------------------------------
      - org.hotio.pullio.notify=true
      - org.hotio.pullio.update=true
      - org.hotio.pullio.generic.webhook=https://notifiarr.com/api/v1/notification/pullio/${PULLIO_API_KEY}
    image: ghcr.io/organizr/organizr:latest

  # #-----------------------------------------------------------------------------
  # # DOWNLOADS
  # #-----------------------------------------------------------------------------

  # qbittorrent - torrent download client with VPN built in
  # Docker Image Docs: https://hotio.dev/containers/qflood/
  # Read the documentaton on proper setup of either wireguard
  # This template is setup for wireguard
  qb:
    container_name: qb
    hostname: qb
    restart: unless-stopped
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
      - net.ipv6.conf.all.disable_ipv6=1
    networks:
      apps: {}
    logging:
      driver: json-file
      options:
        max-file: ${DOCKERLOGGING_MAXFILE}
        max-size: ${DOCKERLOGGING_MAXSIZE}
    healthcheck:
      test: curl --fail http://localhost:8081 || exit 1
      interval: 10s
      retries: 5
      start_period: 20s
      timeout: 10s
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
      - VPN_ENABLED=true
      - VPN_LAN_NETWORK=172.20.0.0/20
      - WEBUI_PORTS=8081/tcp
      - VPN_CONF=wg0
    labels:
      - traefik.enable=true
      - traefik.http.services.qb.loadbalancer.server.port=8081
      - traefik.http.services.qb.loadbalancer.passhostheader=false
      - traefik.http.routers.qb.entrypoints=https
      - traefik.http.routers.qb.tls=true
      - traefik.http.routers.qb.rule=Host(`qb.${DOMAIN_NAME}`) || Host(`${DOMAIN_NAME}`) && PathPrefix(`/qb`)
      - traefik.http.middlewares.qb-redirect.redirectregex.regex=^(.*)/qb$$
      - traefik.http.middlewares.qb-redirect.redirectregex.replacement=$$1/qb/
      - traefik.http.middlewares.qb-strip.stripprefix.prefixes=/qb/
      - traefik.http.middlewares.qb-headers.headers.customrequestheaders.X-Frame-Options=
      - traefik.http.middlewares.qb-headers.headers.customrequestheaders.Referer=
      - traefik.http.middlewares.qb-headers.headers.customrequestheaders.Origin=
      - traefik.http.routers.qb.middlewares=qb-strip,qb-redirect,qb-headers
      - traefik.http.routers.qb.service=qb
      - traefik.http.routers.qb.middlewares=rate-limit@docker,secure-headers@docker,authelia@docker
      # ------------------------------------------------------------------------
      # PULLIO
      # ------------------------------------------------------------------------
      - org.hotio.pullio.notify=true
      - org.hotio.pullio.update=true
      - org.hotio.pullio.generic.webhook=https://notifiarr.com/api/v1/notification/pullio/${PULLIO_API_KEY}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/qbittorrent:/config
      - ${DATA_DIR}/torrents:/data/torrents
    devices:
      - /dev/net/tun
    image: cr.hotio.dev/hotio/qbittorrent

  # sabnzbd - usenet downloader written in python (easynews)
  # Docs: https://hotio.dev/containers/sabnzbd/
  sabnzbd:
    container_name: sabnzbd
    hostname: sabnzbd
    restart: unless-stopped
    networks:
      apps: {}
    logging:
      driver: json-file
      options:
        max-file: ${DOCKERLOGGING_MAXFILE}
        max-size: ${DOCKERLOGGING_MAXSIZE}
    healthcheck:
      test: curl --fail http://localhost:8080/sabnzbd || exit 1
      interval: 10s
      retries: 5
      start_period: 20s
      timeout: 10s
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
    labels:
      - traefik.enable=true
      - traefik.http.routers.sabnzbd.entrypoints=https
      - traefik.http.routers.sabnzbd.tls=true
      - traefik.http.routers.sabnzbd.rule=Host(`sabnzbd.${DOMAIN_NAME}`) || (Host(`${DOMAIN_NAME}`) && PathPrefix(`/sabnzbd`))
      - traefik.http.services.sabnzbd.loadbalancer.server.port=8080
      - traefik.http.routers.sabnzbd.service=sabnzbd
      - traefik.http.routers.sabnzbd.middlewares=rate-limit@docker,secure-headers@docker,authelia@docker
      # ------------------------------------------------------------------------
      # PULLIO
      # ------------------------------------------------------------------------
      - org.hotio.pullio.notify=true
      - org.hotio.pullio.update=true
      - org.hotio.pullio.generic.webhook=https://notifiarr.com/api/v1/notification/pullio/${PULLIO_API_KEY}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/sabnzbd:/config
      - ${DATA_DIR}/usenet:/data/usenet
    # image: lscr.io/linuxserver/sabnzbd:latest
    image: cr.hotio.dev/hotio/sabnzbd:release

    # nzbget - usenet downloader written in C++ (easynews)
  # Docs: https://hotio.dev/containers/nzbget/
  nzbget:
    container_name: nzbget
    restart: unless-stopped
    networks:
      apps: {}
    logging:
      driver: json-file
      options:
        max-file: ${DOCKERLOGGING_MAXFILE}
        max-size: ${DOCKERLOGGING_MAXSIZE}
    healthcheck:
      test: curl --fail http://localhost:6789 || exit 1
      interval: 10s
      retries: 5
      start_period: 20s
      timeout: 10s
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
      - DOCKER_MODS=ghcr.io/gilbn/theme.park:nzbget
      - TP_THEME=${TP_THEME}
    labels:
      - traefik.enable=true
      - traefik.http.routers.nzbget-rtr.entrypoints=https
      - traefik.http.routers.nzbget-rtr.tls=true
      - traefik.http.routers.nzbget-rtr.rule=Host(`nzbget.${DOMAIN_NAME}`) || (Host(`${DOMAIN_NAME}`) && PathPrefix(`/nzbget`))
      - traefik.http.services.nzbget-svc.loadbalancer.server.port=6789
      - traefik.http.routers.nzbget-rtr.service=nzbget-svc
      - traefik.http.routers.nzbget-rtr.middlewares=rate-limit@docker,secure-headers@docker,authelia@docker
      # ------------------------------------------------------------------------
      # PULLIO
      # ------------------------------------------------------------------------
      - org.hotio.pullio.notify=true
      - org.hotio.pullio.update=true
      - org.hotio.pullio.generic.webhook=https://notifiarr.com/api/v1/notification/pullio/${PULLIO_API_KEY}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/nzbget:/config
      - ${DATA_DIR}/usenet:/data/usenet
    image: lscr.io/linuxserver/nzbget:testing
    # image: cr.hotio.dev/hotio/nzbget:testing

  # prowlarr - usenet and torsnab indexer proxy
  # Docker Image Docs: hhttps://hotio.dev/containers/prowlarr/
  # DOCS: https://wiki.servarr.com/prowlarr
  prowlarr:
    container_name: prowlarr
    hostname: prowlarr
    restart: unless-stopped
    networks:
      apps: {}
    logging:
      driver: json-file
      options:
        max-file: ${DOCKERLOGGING_MAXFILE}
        max-size: ${DOCKERLOGGING_MAXSIZE}
    depends_on:
      sabnzbd:
        condition: service_healthy
      qb:
        condition: service_healthy
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
      - DOCKER_MODS=ghcr.io/gilbn/theme.park:prowlarr
      - TP_THEME=${TP_THEME}
    labels:
      - traefik.enable=true
      - traefik.http.routers.prowlarr.entrypoints=https
      - traefik.http.routers.prowlarr.tls=true
      - traefik.http.routers.prowlarr.rule=Host(`prowlarr.${DOMAIN_NAME}`) || (Host(`${DOMAIN_NAME}`) && PathPrefix(`/prowlarr`))
      - traefik.http.services.prowlarr.loadbalancer.server.port=9696
      - traefik.http.routers.prowlarr.service=prowlarr
      - traefik.http.routers.prowlarr.middlewares=rate-limit@docker,secure-headers@docker,authelia@docker
      # ------------------------------------------------------------------------
      # PULLIO
      # ------------------------------------------------------------------------
      - org.hotio.pullio.notify=true
      - org.hotio.pullio.update=true
      - org.hotio.pullio.generic.webhook=https://notifiarr.com/api/v1/notification/pullio/${PULLIO_API_KEY}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/prowlarr:/config
    image: lscr.io/linuxserver/prowlarr:nightly
    # image: cr.hotio.dev/hotio/prowlarr:nightly

  # DOCS: https://autobrr.com/getting-started/docker
  autobrr:
    container_name: autobrr
    hostname: autobrr
    restart: unless-stopped
    networks:
      apps: {}
    logging:
      driver: json-file
      options:
        max-file: ${DOCKERLOGGING_MAXFILE}
        max-size: ${DOCKERLOGGING_MAXSIZE}
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    depends_on:
      sonarr:
        condition: service_healthy
      radarr:
        condition: service_healthy
    volumes:
      - ${DOCKER_DIR}/autobrr:/config
    labels:
      - traefik.enable=true
      - traefik.http.routers.autobrr.entrypoints=https
      - traefik.http.routers.autobrr.tls=true
      - traefik.http.routers.autobrr.rule=Host(`autobrr.${DOMAIN_NAME}`) || (Host(`${DOMAIN_NAME}`) && PathPrefix(`/autobrr`))
      - traefik.http.services.autobrr.loadbalancer.server.port=7474
      - traefik.http.routers.autobrr.service=autobrr
      - traefik.http.routers.autobrr.middlewares=rate-limit@docker,secure-headers@docker,authelia@docker
      # ------------------------------------------------------------------------
      # PULLIO
      # ------------------------------------------------------------------------
      - org.hotio.pullio.notify=true
      - org.hotio.pullio.update=true
      - org.hotio.pullio.generic.webhook=https://notifiarr.com/api/v1/notification/pullio/${PULLIO_API_KEY}
    image: ghcr.io/autobrr/autobrr

  # unpackerr - This application runs as a daemon on your download host. It checks for completed
  # Downloads and extracts them so Radarr and/or Sonarr and/or Lidarr may import them.
  # Docker Image Docs: https://hotio.dev/containers/unpackerr/
  unpackerr:
    container_name: unpackerr
    hostname: unpackerr
    restart: unless-stopped
    networks:
      apps: {}
    logging:
      driver: json-file
      options:
        max-file: ${DOCKERLOGGING_MAXFILE}
        max-size: ${DOCKERLOGGING_MAXSIZE}
    depends_on:
      sonarr:
        condition: service_healthy
      radarr:
        condition: service_healthy
      whisparr:
        condition: service_healthy
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
      - DEBUG=no
    labels:
      # ------------------------------------------------------------------------
      # PULLIO
      # ------------------------------------------------------------------------
      - org.hotio.pullio.notify=true
      - org.hotio.pullio.update=true
      - org.hotio.pullio.generic.webhook=https://notifiarr.com/api/v1/notification/pullio/${PULLIO_API_KEY}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/unpackerr:/config
      - ${DATA_DIR}/torrents:/data/torrents
      - ${DATA_DIR}/usenet:/data/usenet
    image: cr.hotio.dev/hotio/unpackerr:testing

  # #-----------------------------------------------------------------------------
  # # MEDIA
  # #-----------------------------------------------------------------------------

  # overseerr a chatbot used to simplify using services like Sonarr/Radarr/Ombi via the use of chat!
  # Docs: https://hotio.dev/containers/overseerr/
  overseerr:
    container_name: overseerr
    hostname: overseerr
    restart: unless-stopped
    networks:
      apps: {}
    logging:
      driver: json-file
      options:
        max-file: ${DOCKERLOGGING_MAXFILE}
        max-size: ${DOCKERLOGGING_MAXSIZE}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/overseerr:/config
    labels:
      - traefik.enable=true
      - traefik.http.routers.overseerr.entrypoints=https
      - traefik.http.routers.overseerr.tls=true
      - traefik.http.routers.overseerr.rule=Host(`overseerr.${DOMAIN_NAME}`) || Host(`requests.${DOMAIN_NAME}`)
      - traefik.http.services.overseerr.loadbalancer.server.port=5055
      - traefik.http.routers.overseerr.service=overseerr
      - traefik.http.routers.overseerr.middlewares=rate-limit@docker,secure-headers@docker
      # ------------------------------------------------------------------------
      # PULLIO
      # ------------------------------------------------------------------------
      - org.hotio.pullio.notify=true
      - org.hotio.pullio.update=true
      - org.hotio.pullio.generic.webhook=https://notifiarr.com/api/v1/notification/pullio/${PULLIO_API_KEY}
    image: lscr.io/linuxserver/overseerr:develop
    # image: cr.hotio.dev/hotio/overseerr:nightly

  # plex - media server
  # Docker Image Docs: https://hotio.dev/containers/plex/
  plex:
    container_name: plex
    hostname: plex
    restart: unless-stopped
    networks:
      apps: {}
    ports:
      - 32400:32400/tcp
    logging:
      driver: json-file
      options:
        max-file: ${DOCKERLOGGING_MAXFILE}
        max-size: ${DOCKERLOGGING_MAXSIZE}
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    environment:
      - TZ=${TZ}
      - PLEX_UID=${PUID}
      - PLEX_GID=${PGID}
      - PUID=${PUID}
      - PGID=${PGID}
      - DEBUG=no
      - PLEX_CLAIM=${PLEX_CLAIM}
      - PLEX_PASS=yes
      - ADVERTISE_IP=${PLEX_ADVERTISE_IP}
      #-------------------------------------------------------------------------
      # If you have an nvidia GPU
      #-------------------------------------------------------------------------
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,video,utility
      #-------------------------------------------------------------------------
    labels:
      - traefik.enable=true
      - traefik.http.routers.plex.entrypoints=https
      - traefik.http.routers.plex.tls=true
      - traefik.http.routers.plex.rule=Host(`plex.${DOMAIN_NAME}`) || (Host(`${DOMAIN_NAME}`) && PathPrefix(`/plex`))
      - traefik.http.services.plex.loadbalancer.server.port=32400
      - traefik.http.routers.plex.service=plex
      - traefik.http.routers.plex.middlewares=rate-limit@docker,secure-headers@docker
      # ------------------------------------------------------------------------
      # PULLIO
      # ------------------------------------------------------------------------
      - org.hotio.pullio.notify=true
      - org.hotio.pullio.update=true
      - org.hotio.pullio.generic.webhook=https://notifiarr.com/api/v1/notification/pullio/${PULLIO_API_KEY}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/plex:/config
      - ${DOCKER_DIR}/plex-transcode:/transcode
      - ${DATA_DIR}/media:/data/media
    image: cr.hotio.dev/hotio/plex:release

  # tautulli - plex monitor
  # Docker Image Docs: https://hotio.dev/containers/tautulli/
  tautulli:
    container_name: tautulli
    hostname: tautulli
    restart: unless-stopped
    networks:
      apps: {}
    logging:
      driver: json-file
      options:
        max-file: ${DOCKERLOGGING_MAXFILE}
        max-size: ${DOCKERLOGGING_MAXSIZE}
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
      - UMASK=022
      - DOCKER_MODS=ghcr.io/gilbn/theme.park:tautulli
      - TP_THEME=${TP_THEME}
    labels:
      - traefik.enable=true
      - traefik.http.services.tautulli.loadbalancer.server.port=8181
      - traefik.http.routers.tautulli.entrypoints=https
      - traefik.http.routers.tautulli.tls=true
      - traefik.http.routers.tautulli.rule=Host(`tautulli.${DOMAIN_NAME}`) || Host(`${DOMAIN_NAME}`) && PathPrefix(`/tautulli`)
      - traefik.http.routers.tautulli.service=tautulli
      - traefik.http.routers.tautulli.middlewares=rate-limit@docker,secure-headers@docker,authelia@docker
      # ------------------------------------------------------------------------
      # PULLIO
      # ------------------------------------------------------------------------
      - org.hotio.pullio.notify=true
      - org.hotio.pullio.update=true
      - org.hotio.pullio.generic.webhook=https://notifiarr.com/api/v1/notification/pullio/${PULLIO_API_KEY}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/tautulli:/config
    image: lscr.io/linuxserver/tautulli:develop
    # image: cr.hotio.dev/hotio/tautulli:testing

  # Ofelia is a modern and low footprint job scheduler for docker environments, built on Go.
  # Ofelia aims to be a replacement for the old fashioned cron.
  # DOCS: -- https://github.com/mcuadros/ofelia
  ofelia:
    container_name: ofelia
    hostname: ofelia
    depends_on:
      - plextraktsync
    command: daemon --docker
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    labels:
      - ofelia.job-run.plextraktsync.schedule="@every 6h"
      - ofelia.job-run.plextraktsync.container="plextraktsync"
      # ------------------------------------------------------------------------
      # PULLIO
      # ------------------------------------------------------------------------
      - org.hotio.pullio.notify=true
      - org.hotio.pullio.update=true
      - org.hotio.pullio.generic.webhook=https://notifiarr.com/api/v1/notification/pullio/${PULLIO_API_KEY}
    image: mcuadros/ofelia:latest

  # This project adds a two-way-sync between trakt.tv and Plex Media Server.
  # It requires a trakt.tv account but no Plex premium and no Trakt VIP subscriptions,
  # unlike the Plex app provided by Trakt.
  # DOCS -- https://github.com/Taxel/PlexTraktSync
  plextraktsync:
    container_name: plextraktsync
    image: ghcr.io/taxel/plextraktsync
    networks:
      apps: {}
    volumes:
      - ${DOCKER_DIR}/plextraktsync:/app/config
    labels:
      - ofelia.enabled=true
      # ------------------------------------------------------------------------
      # PULLIO
      # ------------------------------------------------------------------------
      - org.hotio.pullio.notify=true
      - org.hotio.pullio.update=true
      - org.hotio.pullio.generic.webhook=https://notifiarr.com/api/v1/notification/pullio/${PULLIO_API_KEY}

  notifiarr:
    container_name: notifiarr
    hostname: notifiarr
    restart: unless-stopped
    networks:
      apps: {}
    logging:
      driver: json-file
      options:
        max-file: ${DOCKERLOGGING_MAXFILE}
        max-size: ${DOCKERLOGGING_MAXSIZE}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
    depends_on:
      sonarr:
        condition: service_healthy
      radarr:
        condition: service_healthy
    labels:
      - traefik.enable=true
      - traefik.http.services.notifiarr.loadbalancer.server.port=5454
      - traefik.http.routers.notifiarr.entrypoints=https
      - traefik.http.routers.notifiarr.tls=true
      - traefik.http.routers.notifiarr.rule=Host(`notifiarr.${DOMAIN_NAME}`) || Host(`${DOMAIN_NAME}`) && PathPrefix(`/notifiarr`)
      - traefik.http.routers.notifiarr.service=notifiarr
      - traefik.http.routers.notifiarr.middlewares=rate-limit@docker,secure-headers@docker
      # ------------------------------------------------------------------------
      # PULLIO
      # ------------------------------------------------------------------------
      - org.hotio.pullio.notify=true
      - org.hotio.pullio.update=true
      - org.hotio.pullio.generic.webhook=https://notifiarr.com/api/v1/notification/pullio/${PULLIO_API_KEY}
    volumes:
      - ${DOCKER_DIR}/notifiarr:/config
      - /var/run/utmp:/var/run/utmp
    image: golift/notifiarr

  plex-meta:
    container_name: plex-meta
    hostname: plex-meta
    restart: unless-stopped
    networks:
      apps: {}
    logging:
      driver: json-file
      options:
        max-file: ${DOCKERLOGGING_MAXFILE}
        max-size: ${DOCKERLOGGING_MAXSIZE}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
      - PMM_OVERLAYS=true
    labels:
      # ------------------------------------------------------------------------
      # PULLIO
      # ------------------------------------------------------------------------
      - org.hotio.pullio.notify=true
      - org.hotio.pullio.update=true
      - org.hotio.pullio.generic.webhook=https://notifiarr.com/api/v1/notification/pullio/${PULLIO_API_KEY}
    volumes:
      - ${DOCKER_DIR}/plex-meta:/config
    image: meisnate12/plex-meta-manager

  # bazarr - automatic download subtitles
  # Docker Image Docs: https://hotio.dev/containers/bazarr/
  # DOCS: https://wiki.bazarr.media/Getting-Started/Setup-Guide/
  bazarr:
    container_name: bazarr
    hostname: bazarr
    restart: unless-stopped
    networks:
      apps: {}
    logging:
      driver: json-file
      options:
        max-file: ${DOCKERLOGGING_MAXFILE}
        max-size: ${DOCKERLOGGING_MAXSIZE}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
      - DOCKER_MODS=ghcr.io/gilbn/theme.park:bazarr
      - TP_THEME=${TP_THEME}
    labels:
      - traefik.enable=true
      - traefik.http.routers.bazarr.entrypoints=https
      - traefik.http.routers.bazarr.tls=true
      - traefik.http.routers.bazarr.rule=Host(`bazarr.${DOMAIN_NAME}`) || (Host(`${DOMAIN_NAME}`) && PathPrefix(`/bazarr`))
      - traefik.http.services.bazarr.loadbalancer.server.port=6767
      - traefik.http.routers.bazarr.service=bazarr
      - traefik.http.routers.bazarr.middlewares=rate-limit@docker,secure-headers@docker,authelia@docker
      # ------------------------------------------------------------------------
      # PULLIO
      # ------------------------------------------------------------------------
      - org.hotio.pullio.notify=true
      - org.hotio.pullio.update=true
      - org.hotio.pullio.generic.webhook=https://notifiarr.com/api/v1/notification/pullio/${PULLIO_API_KEY}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/bazarr:/config
      - ${DATA_DIR}/media:/data
    image: lscr.io/linuxserver/bazarr:development
    # image: cr.hotio.dev/hotio/bazarr:nightly

  # sonarr - TV Shows
  # Docker Image Docs: https://hotio.dev/containers/sonarr/
  # DOCS: https://wiki.servarr.com/en/sonarr
  sonarr:
    container_name: sonarr
    hostname: sonarr
    restart: unless-stopped
    networks:
      apps: {}
    logging:
      driver: json-file
      options:
        max-file: ${DOCKERLOGGING_MAXFILE}
        max-size: ${DOCKERLOGGING_MAXSIZE}
    healthcheck:
      test: curl --fail http://localhost:8989/sonarr || exit 1
      interval: 10s
      retries: 5
      start_period: 20s
      timeout: 10s
    depends_on:
      sabnzbd:
        condition: service_healthy
      qb:
        condition: service_healthy
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
      - DOCKER_MODS=ghcr.io/gilbn/theme.park:sonarr
      - TP_THEME=${TP_THEME}
    labels:
      - traefik.enable=true
      - traefik.http.routers.sonarr.entrypoints=https
      - traefik.http.routers.sonarr.tls=true
      - traefik.http.routers.sonarr.rule=Host(`sonarr.${DOMAIN_NAME}`) || (Host(`${DOMAIN_NAME}`) && PathPrefix(`/sonarr`))
      - traefik.http.services.sonarr.loadbalancer.server.port=8989
      - traefik.http.routers.sonarr.service=sonarr
      - traefik.http.routers.sonarr.middlewares=rate-limit@docker,secure-headers@docker,authelia@docker
      # ------------------------------------------------------------------------
      # PULLIO
      # ------------------------------------------------------------------------
      - org.hotio.pullio.notify=true
      - org.hotio.pullio.update=true
      - org.hotio.pullio.generic.webhook=https://notifiarr.com/api/v1/notification/pullio/${PULLIO_API_KEY}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/sonarr:/config
      - ${DATA_DIR}:/data
    image: lscr.io/linuxserver/sonarr:develop
    # image: cr.hotio.dev/hotio/sonarr:nightly

  # radarr - Movies
  # Docker Image Docs: https://hotio.dev/containers/radarr/
  # DOCS: https://wiki.servarr.com/en/radarr
  radarr:
    container_name: radarr
    hostname: radarr
    restart: unless-stopped
    networks:
      apps: {}
    logging:
      driver: json-file
      options:
        max-file: ${DOCKERLOGGING_MAXFILE}
        max-size: ${DOCKERLOGGING_MAXSIZE}
    healthcheck:
      test: curl --fail http://localhost:7878/radarr || exit 1
      interval: 10s
      retries: 5
      start_period: 20s
      timeout: 10s
    depends_on:
      sabnzbd:
        condition: service_healthy
      qb:
        condition: service_healthy
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
      - DOCKER_MODS=ghcr.io/gilbn/theme.park:radarr
      - TP_THEME=${TP_THEME}
    labels:
      - traefik.enable=true
      - traefik.http.routers.radarr.entrypoints=https
      - traefik.http.routers.radarr.tls=true
      - traefik.http.routers.radarr.rule=Host(`radarr.${DOMAIN_NAME}`) || (Host(`${DOMAIN_NAME}`) && PathPrefix(`/radarr`))
      - traefik.http.services.radarr.loadbalancer.server.port=7878
      - traefik.http.routers.radarr.service=radarr
      - traefik.http.routers.radarr.middlewares=rate-limit@docker,secure-headers@docker,authelia@docker
      # ------------------------------------------------------------------------
      # PULLIO
      # ------------------------------------------------------------------------
      - org.hotio.pullio.notify=true
      - org.hotio.pullio.update=true
      - org.hotio.pullio.generic.webhook=https://notifiarr.com/api/v1/notification/pullio/${PULLIO_API_KEY}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/radarr:/config
      - ${DATA_DIR}:/data
    image: lscr.io/linuxserver/radarr:nightly
    # image: cr.hotio.dev/hotio/radarr:nightly

  # lidarr - Music
  # Docs: https://hotio.dev/containers/lidarr/
  # Docs: Lidarr Extended - https://github.com/RandomNinjaAtk/docker-lidarr-extended
  lidarr:
    container_name: lidarr
    hostname: lidarr
    restart: unless-stopped
    networks:
      apps: {}
    logging:
      driver: json-file
      options:
        max-file: ${DOCKERLOGGING_MAXFILE}
        max-size: ${DOCKERLOGGING_MAXSIZE}
    healthcheck:
      test: curl --fail http://localhost:8686/lidarr || exit 1
      interval: 10s
      retries: 5
      start_period: 20s
      timeout: 10s
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
      - autoStart=true
      - configureLidarrWithOptimalSettings=true
      - audioFormat=native
      - audioBitrate=lossless
      - audioLyricType=both
      - dlClientSource=deezer
      - arlToken=${ARL_DEEZER_TOKEN}
      - tidalCountryCode=US
      - addDeezerTopArtists=false
      - addDeezerTopAlbumArtists=false
      - addDeezerTopTrackArtists=false
      - topLimit=100
      - addRelatedArtists=false
      - numberOfRelatedArtistsToAddPerArtist=5
      - beetsMatchPercentage=80
      - searchSort=album
      - plexUrl=http://plex:32400
      - plexToken=${PLEX_TOKEN}
      - DOCKER_MODS=ghcr.io/gilbn/theme.park:lidarr
      - TP_THEME=${TP_THEME}
    labels:
      - traefik.enable=true
      - traefik.http.routers.lidarr.entrypoints=https
      - traefik.http.routers.lidarr.tls=true
      - traefik.http.routers.lidarr.rule=Host(`lidarr.${DOMAIN_NAME}`) || (Host(`${DOMAIN_NAME}`) && PathPrefix(`/lidarr`))
      - traefik.http.services.lidarr.loadbalancer.server.port=8686
      - traefik.http.routers.lidarr.service=lidarr
      - traefik.http.routers.lidarr.middlewares=rate-limit@docker,secure-headers@docker,authelia@docker
      # ------------------------------------------------------------------------
      # PULLIO
      # ------------------------------------------------------------------------
      - org.hotio.pullio.notify=true
      - org.hotio.pullio.update=true
      - org.hotio.pullio.generic.webhook=https://notifiarr.com/api/v1/notification/pullio/${PULLIO_API_KEY}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/lidarr:/config
      - ${DATA_DIR}/media/music:/data/media/music
      - ${DATA_DIR}/media/music-videos:/music-videos
      - ${DATA_DIR}/other-downloads:/downloads
      - ${DATA_DIR}/usenet:/data/usenet
      - ${DATA_DIR}/torrents:/data/torrents
    # image: lscr.io/linuxserver/lidarr:nightly
    # image: cr.hotio.dev/hotio/lidarr:nightly
    image: randomninjaatk/lidarr-extended

  # whisparr - Adult Movies
  # Docker Image Docs: https://hotio.dev/containers/whisparr/
  # DOCS: https://wiki.servarr.com/en/whisparr
  whisparr:
    container_name: whisparr
    hostname: whisparr
    restart: unless-stopped
    networks:
      apps: {}
    logging:
      driver: json-file
      options:
        max-file: ${DOCKERLOGGING_MAXFILE}
        max-size: ${DOCKERLOGGING_MAXSIZE}
    healthcheck:
      test: curl --fail http://localhost:6969/whisparr || exit 1
      interval: 10s
      retries: 5
      start_period: 20s
      timeout: 10s
    depends_on:
      sabnzbd:
        condition: service_healthy
      qb:
        condition: service_healthy
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
      - DOCKER_MODS=ghcr.io/gilbn/theme.park:whisparr
      - TP_THEME=${TP_THEME}
    labels:
      - traefik.enable=true
      - traefik.http.routers.whisparr.entrypoints=https
      - traefik.http.routers.whisparr.tls=true
      - traefik.http.routers.whisparr.rule=Host(`whisparr.${DOMAIN_NAME}`) || (Host(`${DOMAIN_NAME}`) && PathPrefix(`/whisparr`))
      - traefik.http.services.whisparr.loadbalancer.server.port=6969
      - traefik.http.routers.whisparr.service=whisparr
      - traefik.http.routers.whisparr.middlewares=rate-limit@docker,secure-headers@docker,authelia@docker
      # ------------------------------------------------------------------------
      # PULLIO
      # ------------------------------------------------------------------------
      - org.hotio.pullio.notify=true
      - org.hotio.pullio.update=true
      - org.hotio.pullio.generic.webhook=https://notifiarr.com/api/v1/notification/pullio/${PULLIO_API_KEY}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/whisparr:/config
      - ${DATA_DIR}:/data
    image: cr.hotio.dev/hotio/whisparr:nightly

  # Autoscan replaces the default Plex behaviour for picking up file changes on the file system.
  # Autoscan integrates with Sonarr, Radarr, Lidarr and Google Drive to fetch changes in near real-time
  # without relying on the file system.
  # DOCKER DOCS: https://hotio.dev/containers/autoscan/
  # AUTOSCAN DOCS: https://github.com/cloudbox/autoscan
  autoscan:
    container_name: autoscan
    hostname: autoscan
    restart: unless-stopped
    networks:
      apps: {}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
    labels:
      # ------------------------------------------------------------------------
      # PULLIO
      # ------------------------------------------------------------------------
      - org.hotio.pullio.notify=true
      - org.hotio.pullio.update=true
      - org.hotio.pullio.generic.webhook=https://notifiarr.com/api/v1/notification/pullio/${PULLIO_API_KEY}
    volumes:
      - ${DOCKER_DIR}/autoscan:/config
      - ${DATA_DIR}/media:/data/media:ro
    image: cr.hotio.dev/hotio/autoscan

  #-----------------------------------------------------------------------------
  # MISC
  #-----------------------------------------------------------------------------

  # whoami - simple service that returns PC information from where it was accessed.
  # this is being used to keep apex domain alive
  whoami:
    container_name: whoami
    hostname: whoami
    restart: unless-stopped
    networks:
      apps: {}
    logging:
      driver: json-file
      options:
        max-file: ${DOCKERLOGGING_MAXFILE}
        max-size: ${DOCKERLOGGING_MAXSIZE}
    environment:
      - TZ=${TZ}
    volumes:
      - /etc/localtime:/etc/localtime:ro
    labels:
      - traefik.enable=true
      - traefik.http.routers.whoami.entrypoints=https
      - traefik.http.routers.whoami.tls=true
      - traefik.http.routers.whoami.rule=Host(`whoami.${DOMAIN_NAME}`) || (Host(`${DOMAIN_NAME}`) && PathPrefix(`/whoami`))
      - traefik.http.services.whoami.loadbalancer.server.port=80
      - traefik.http.routers.whoami.service=whoami
      - traefik.http.routers.whoami.middlewares=rate-limit@docker,secure-headers@docker,authelia@docker
      # ------------------------------------------------------------------------
    image: traefik/whoami

networks:
  apps:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/24

secrets:
  acme_email_secret:
    file: ${DOCKER_DIR}/secrets/acme_email_secret
  calibre_user_secret:
    file: ${DOCKER_DIR}/secrets/calibre_user_secret
  calibre_secret:
    file: ${DOCKER_DIR}/secrets/calibre_secret
  jwt_secret:
    file: ${DOCKER_DIR}/secrets/jwt_secret
  local_session_secret:
    file: ${DOCKER_DIR}/secrets/local_session_secret
  mysql_secret:
    file: ${DOCKER_DIR}/secrets/mysql_secret
  mysql_root_secret:
    file: ${DOCKER_DIR}/secrets/mysql_root_secret
  notifier_smtp_secret:
    file: ${DOCKER_DIR}/secrets/notifier_smtp_secret
  duo_api_secret:
    file: ${DOCKER_DIR}/secrets/duo_api_secret
  redis_secret:
    file: ${DOCKER_DIR}/secrets/redis_secret
  postgres_secret:
    file: ${DOCKER_DIR}/secrets/postgres_secret
  ldap_secret:
    file: ${DOCKER_DIR}/secrets/ldap_secret
  mariadb_root_secret:
    file: ${DOCKER_DIR}/secrets/mariadb_root_secret
  maxminddb_secret:
    file: ${DOCKER_DIR}/secrets/maxminddb_secret
