version: '3.3'
services:
  #-----------------------------------------------------------------------------
  # MANAGEMENT
  #-----------------------------------------------------------------------------

  # traefik - reverse proxy with letsencrypt built in
  # Docs: https://doc.traefik.io/traefik/
  traefik:
    container_name: traefik
    hostname: traefik
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      apps: {}
    ports:
      - 80:80
      - 443:443
      - 8080:8080
    dns:
      - 1.1.1.1
      - 8.8.8.8
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_HOSTED_ZONE_ID=${AWS_HOSTED_ZONE_ID}
      - AWS_TTL=${AWS_TTL}
    command: # CLI arguments
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=true
      - --entryPoints.http.address=:80
      - --entryPoints.https.address=:443
        # Allow these IPs to set the X-Forwarded-* headers - Cloudflare IPs: https://www.cloudflare.com/ips/
        # If you use CloudFlare, this setup is using route53
      # - --entrypoints.https.forwardedHeaders.trustedIPs=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/12,172.64.0.0/13,131.0.72.0/22
      - --entryPoints.traefik.address=:8080
      - --api=true
      # uncomment below to access dashboard at localhost:8080/dashboard/ for testing only
      # - --api.insecure=true
      - --serversTransport.insecureSkipVerify=true
      - --log=true
      - --log.level=DEBUG # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      - --accessLog=true
      - --accessLog.filePath=/config/traefik.log
      - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
      - --accessLog.filters.statusCodes=400-499
      - --providers.docker=true
      - --providers.docker.endpoint=unix:///var/run/docker.sock
      # - --providers.docker.defaultrule=Host(`{{ index .Labels "com.docker.compose.service" }}.${DOMAIN_NAME}`)
      - --providers.docker.exposedByDefault=false
      - --providers.docker.network=apps
      - --providers.docker.swarmMode=false
      # Load dynamic configuration from one or more .toml or .yml files in a directory.
      - --providers.file.directory=/config/rules
      # Load dynamic configuration from a file.
      #      - --providers.file.filename=/path/to/file
      # Only works on top level files in the rules folder
      - --providers.file.watch=true
      # LetsEncrypt Staging Server - uncomment when testing
      - --certificatesResolvers.letsencrypt.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory
      - --certificatesResolvers.letsencrypt.acme.email=${ACME_EMAIL}
      - --certificatesResolvers.letsencrypt.acme.storage=/config/acme.json
      - --certificatesResolvers.letsencrypt.acme.dnsChallenge.provider=${DNS_PLUGIN}
      - --certificatesResolvers.letsencrypt.acme.dnsChallenge.resolvers=1.1.1.1:53,8.8.8.8:53
    labels:
      - traefik.enable=true
      # ------------------------------------------------------------------------
      # HTTP-to-HTTPS Redirect
      # (comment out next 4 lines if you don't want http to https redirection)
      - traefik.http.routers.http-catchall.entrypoints=http
      - traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)
      - traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https
      - traefik.http.routers.http-catchall.middlewares=redirect-to-https
      # ------------------------------------------------------------------------
      # HTTP Routers
      # - traefik.http.routers.traefik-rtr.entrypoints=http
      # if not using SSL certs, comment 3 below lines and uncomment above
      - traefik.http.routers.traefik-rtr.tls=true
      - traefik.http.routers.traefik-rtr.entrypoints=https
      - traefik.http.routers.traefik-rtr.tls.certresolver=letsencrypt
      # ------------------------------------------------------------------------
      - traefik.http.routers.traefik-rtr.rule=Host(`traefik.${DOMAIN_NAME}`)
      - traefik.http.routers.traefik-rtr.tls.domains[0].main=${DOMAIN_NAME}
      - traefik.http.routers.traefik-rtr.tls.domains[0].sans=*.${DOMAIN_NAME}
      # ------------------------------------------------------------------------
      # Services - API
      - traefik.http.routers.traefik-rtr.service=api@internal
      # ------------------------------------------------------------------------
      # Middlewares
      - traefik.http.routers.traefik-rtr.middlewares=chain-authelia@file
      # uncomment below and comment above if you don't wish to use oauth and mfa
      # - traefik.http.routers.traefik-rtr.middlewares=chain-no-auth@file
      # ------------------------------------------------------------------------
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - ${DOCKER_DIR}/traefik:/config
    image: traefik:latest

  # redis - session database (more performance)
  # default run PUID is 1001 and PGID is root(0)
  # cant seem to change it, folder permissions need to be set accordingly
  authredis:
    container_name: authredis
    hostname: authredis
    restart: unless-stopped
    networks:
      apps: {}
    environment:
      - TZ=${TZ}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - ${DOCKER_DIR}/authredis:/bitnami/redis/data
      - ${DOCKER_DIR}/authredis/redis.conf:/opt/bitnami/redis/mounted-etc/redis.conf
    secrets:
      - redis
    command: /opt/bitnami/scripts/redis/run.sh --requirepass ${REDIS_PASSWORD}
    image: bitnami/redis:latest

  # mariadb - used for authelia storage
  authmariadb:
    container_name: authmariadb
    hostname: authmariadb
    restart: unless-stopped
    networks:
      apps: {}
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK_SET=022
      - UMASK=022
      - FILE__MYSQL_ROOT_PASSWORD=/run/secrets/mysql_root
      - FILE__MYSQL_PASSWORD=/run/secrets/mysql
      - MYSQL_DATABASE=authelia
      - MYSQL_USER=authelia
    secrets:
      - mysql
      - mysql_root
    volumes:
      - ${DOCKER_DIR}/authmariadb:/config
    image: ghcr.io/linuxserver/mariadb:latest

  # Authelia - Self-Hosted Single Sign-On and Two-Factor Authentication
  authelia:
    container_name: authelia
    hostname: authelia
    restart: unless-stopped
    networks:
      apps: {}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/authelia:/config
    environment:
      - TZ=${TZ}
      - AUTHELIA_JWT_SECRET_FILE=/run/secrets/jwt
      - AUTHELIA_SESSION_SECRET_FILE=/run/secrets/session
      - AUTHELIA_STORAGE_MYSQL_PASSWORD_FILE=/run/secrets/mysql
      - AUTHELIA_NOTIFIER_SMTP_PASSWORD_FILE=/run/secrets/smtp
      - AUTHELIA_DUO_API_SECRET_KEY_FILE=/run/secrets/duo
      - AUTHELIA_SESSION_REDIS_PASSWORD_FILE=/run/secrets/redis
      - AUTHELIA_STORAGE_POSTGRES_PASSWORD_FILE=/run/secrets/postgress
      - AUTHELIA_AUTHENTICATION_BACKEND_LDAP_PASSWORD_FILE=/run/secrets/ldap
    labels:
      - traefik.enable=true
      # ------------------------------------------------------------------------
      # HTTP Routers
      # - traefik.http.routers.authelia-rtr.entrypoints=http
      # if not using SSL certs, comment the 2 below lines and uncomment above
      - traefik.http.routers.authelia-rtr.entrypoints=https
      - traefik.http.routers.authelia-rtr.tls.certresolver=letsencrypt
      # ------------------------------------------------------------------------
      - traefik.http.routers.authelia-rtr.rule=Host(`authelia.${DOMAIN_NAME}`)
      # ------------------------------------------------------------------------
      # HTTP Services
      - traefik.http.services.authelia-svc.loadbalancer.server.port=9091
      - traefik.http.routers.authelia-rtr.service=authelia-svc
      # ------------------------------------------------------------------------
      # Middlewares
      - traefik.http.routers.authelia-rtr.middlewares=chain-authelia@file
      # uncomment below and comment above if you don't wish to use oauth and mfa
      # - traefik.http.routers.authelia-rtr.middlewares=chain-no-auth@file
      # ------------------------------------------------------------------------
    secrets:
      - jwt
      - session
      - mysql
      - smtp
      - duo
      - redis
      - postgress
      - ldap
    depends_on:
      - authredis
      - authmariadb
    image: authelia/authelia:4.21.0

  # portainer - container management frontend
  # - view logs
  # - restart containers
  # - connect to container shell (if available)
  # - see configuration
  portainer:
    container_name: portainer
    hostname: portainer
    restart: unless-stopped
    networks:
      apps: {}
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - ${DOCKER_DIR}/portainer:/data
    labels:
      - traefik.enable=true
      # ------------------------------------------------------------------------
      # HTTP Routers
      # - traefik.http.routers.portainer-rtr.entrypoints=http
      # if not using SSL certs, comment the 2 below lines and uncomment above
      - traefik.http.routers.portainer-rtr.entrypoints=https
      - traefik.http.routers.portainer-rtr.tls.certresolver=letsencrypt
      - traefik.http.routers.portainer-rtr.rule=Host(`portainer.${DOMAIN_NAME}`)
      # ------------------------------------------------------------------------
      # HTTP Services
      - traefik.http.services.portainer-svc.loadbalancer.server.port=9000
      - traefik.http.routers.portainer-rtr.service=portainer-svc
      # ------------------------------------------------------------------------
      # Middlewares
      - traefik.http.routers.portainer-rtr.middlewares=chain-authelia@file
      # uncomment below and comment above if you don't wish to use oauth and mfa
      # - traefik.http.routers.portainer-rtr.middlewares=chain-no-auth@file
      # ------------------------------------------------------------------------
    image: portainer/portainer-ce:latest

  #-----------------------------------------------------------------------------
  # MEDIA
  #-----------------------------------------------------------------------------

  # plex - media server
  # Docs: https://hotio.dev/containers/plex/
  plex:
    container_name: plex
    hostname: plex
    restart: unless-stopped
    networks:
      apps: {}
    ports:
      - 32400:32400/tcp
    environment:
      - TZ=${TZ}
      - PLEX_UID=${PUID}
      - PLEX_GID=${PGID}
      - PUID=${PUID}
      - PGID=${PGID}
      - PLEX_CLAIM=${PLEX_CLAIM}
      - ADVERTISE_IP=${PLEX_ADVERTISE_IP}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/plex:/config
      - ${DOCKER_DIR}/plex-transcode:/transcode
      - data:/data
    labels:
      - traefik.enable=true
      # ------------------------------------------------------------------------
      # HTTP Routers
      # - traefik.http.routers.plex-rtr.entrypoints=http
      # if not using SSL certs, comment the 2 below lines and uncomment above
      - traefik.http.routers.plex-rtr.entrypoints=https
      - traefik.http.routers.plex-rtr.tls.certresolver=letsencrypt
      - traefik.http.routers.plex-rtr.rule=Host(`plex.${DOMAIN_NAME}`)
      # ------------------------------------------------------------------------
      # HTTP Services
      - traefik.http.services.plex-svc.loadbalancer.server.port=32400
      - traefik.http.routers.plex-rtr.service=plex-svc
      # ------------------------------------------------------------------------
      # Middlewares
      - traefik.http.routers.plex-rtr.middlewares=chain-authelia@file
      # uncomment below and comment above if you don't wish to use oauth and mfa
      # - traefik.http.routers.plex-rtr.middlewares=chain-no-auth@file
      # ------------------------------------------------------------------------
    image: ghcr.io/hotio/plex:autoscan

  # plex - media server
  # Docs: https://hotio.dev/containers/plex/
  plex-4k:
    container_name: plex-4k
    hostname: plex-4k
    restart: unless-stopped
    networks:
      apps: {}
    ports:
      - 32401:32400/tcp
    environment:
      - TZ=${TZ}
      - PLEX_UID=${PUID}
      - PLEX_GID=${PGID}
      - PUID=${PUID}
      - PGID=${PGID}
      - PLEX_CLAIM=${PLEX_4K_CLAIM}
      - ADVERTISE_IP=${PLEX_4K_ADVERTISE_IP}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/plex-4k:/config
      - ${DOCKER_DIR}/plex-4k-transcode:/transcode
      - data:/data
    labels:
      - traefik.enable=true
      # ------------------------------------------------------------------------
      # HTTP Routers
      # - traefik.http.routers.plex-4k-rtr.entrypoints=http
      # if not using SSL certs, comment the 2 below lines and uncomment above
      - traefik.http.routers.plex-4k-rtr.entrypoints=https
      - traefik.http.routers.plex-4k-rtr.tls.certresolver=letsencrypt
      - traefik.http.routers.plex-4k-rtr.rule=Host(`plex-4k.${DOMAIN_NAME}`)
      # ------------------------------------------------------------------------
      # HTTP Services
      - traefik.http.services.plex-4k-svc.loadbalancer.server.port=32400
      - traefik.http.routers.plex-4k-rtr.service=plex-4k-svc
      # ------------------------------------------------------------------------
      # Middlewares
      - traefik.http.routers.plex-4k-rtr.middlewares=chain-authelia@file
      # uncomment below and comment above if you don't wish to use oauth and mfa
      # - traefik.http.routers.plex-4k-rtr.middlewares=chain-no-auth@file
      # ------------------------------------------------------------------------
    image: ghcr.io/hotio/plex:autoscan

  # tautulli - plex monitor
  # Docs: https://hotio.dev/containers/tautulli/
  tautulli:
    container_name: tautulli
    hostname: tautulli
    restart: unless-stopped
    networks:
      apps: {}
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
      - UMASK=022
    links:
      - plex
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/tautulli:/config
    labels:
      - traefik.enable=true
      # ------------------------------------------------------------------------
      # HTTP Routers
      # - traefik.http.routers.tautulli-rtr.entrypoints=http
      # if not using SSL certs, comment the 2 below lines and uncomment above
      - traefik.http.routers.tautulli-rtr.entrypoints=https
      - traefik.http.routers.tautulli-rtr.tls.certresolver=letsencrypt
      - traefik.http.routers.tautulli-rtr.rule=Host(`tautulli.${DOMAIN_NAME}`) || (Host(`${DOMAIN_NAME}`) && PathPrefix(`/tautulli`))
      # ------------------------------------------------------------------------
      # HTTP Services
      - traefik.http.services.tautulli-svc.loadbalancer.server.port=8181
      - traefik.http.routers.tautulli-rtr.service=tautulli-svc
      # ------------------------------------------------------------------------
      # Middlewares
      - traefik.http.routers.tautulli-rtr.middlewares=chain-authelia@file
      # uncomment below and comment above if you don't wish to use oauth and mfa
      # - traefik.http.routers.tautulli-rtr.middlewares=chain-no-auth@file
      # ------------------------------------------------------------------------
    image: ghcr.io/hotio/tautulli:latest

  # tautulli - plex monitor
  # Docs: https://hotio.dev/containers/tautulli/
  tautulli-4k:
    container_name: tautulli-4k
    hostname: tautulli-4k
    restart: unless-stopped
    networks:
      apps: {}
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
      - UMASK=022
    links:
      - plex-4k
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/tautulli-4k:/config
    labels:
      - traefik.enable=true
      # ------------------------------------------------------------------------
      # HTTP Routers
      # - traefik.http.routers.tautulli-4k-rtr.entrypoints=http
      # if not using SSL certs, comment the 2 below lines and uncomment above
      - traefik.http.routers.tautulli-4k-rtr.entrypoints=https
      - traefik.http.routers.tautulli-4k-rtr.tls.certresolver=letsencrypt
      - traefik.http.routers.tautulli-4k-rtr.rule=Host(`tautulli-4k.${DOMAIN_NAME}`) || (Host(`${DOMAIN_NAME}`) && PathPrefix(`/tautulli-4k`))
      # ------------------------------------------------------------------------
      # HTTP Services
      - traefik.http.services.tautulli-4k-svc.loadbalancer.server.port=8181
      - traefik.http.routers.tautulli-4k-rtr.service=tautulli-4k-svc
      # ------------------------------------------------------------------------
      # Middlewares
      - traefik.http.routers.tautulli-4k-rtr.middlewares=chain-authelia@file
      # uncomment below and comment above if you don't wish to use oauth and mfa
      # - traefik.http.routers.tautulli-4k-rtr.middlewares=chain-no-auth@file
      # ------------------------------------------------------------------------
    image: ghcr.io/hotio/tautulli:latest

  # kitana - plex plugin middleware (frontend)
  # Docs: https://github.com/pannal/Kitana
  kitana:
    container_name: kitana
    hostname: kitana
    restart: unless-stopped
    networks:
      apps: {}
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
    command: -B 0.0.0.0:31337 -p /kitana -P
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/kitana:/app/data
    labels:
      - traefik.enable=true
      # ------------------------------------------------------------------------
      # HTTP Routers
      # - traefik.http.routers.tautulli-rtr.entrypoints=http
      # if not using SSL certs, comment the 2 below lines and uncomment above
      - traefik.http.routers.kitana-rtr.entrypoints=https
      - traefik.http.routers.kitana-rtr.tls.certresolver=letsencrypt
      - traefik.http.routers.kitana-rtr.rule=(Host(`kitana.${DOMAIN_NAME}`) && PathPrefix(`/kitana`)) || (Host(`${DOMAIN_NAME}`) && PathPrefix(`/kitana`))
      # ------------------------------------------------------------------------
      # HTTP Services
      - traefik.http.services.kitana-svc.loadbalancer.server.port=31337
      - traefik.http.routers.kitana-rtr.service=kitana-svc
      # ------------------------------------------------------------------------
      # Middlewares
      - traefik.http.routers.kitana-rtr.middlewares=chain-authelia@file
      # uncomment below and comment above if you don't wish to use oauth and mfa
      # - traefik.http.routers.kitana-rtr.middlewares=chain-no-auth@file
      # ------------------------------------------------------------------------
    image: pannal/kitana:latest

  # sabnzbd - usenet downloader written in python (easynews)
  # Docs: https://hotio.dev/containers/sabnzbd/
  sabnzbd:
    container_name: sabnzbd
    hostname: sabnzbd
    restart: unless-stopped
    networks:
      apps: {}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/sabnzbd:/config
      - downloads:/data/downloads
    labels:
      - traefik.enable=true
      # ------------------------------------------------------------------------
      # HTTP Routers
      # - traefik.http.routers.sabnzbd-rtr.entrypoints=http
      # if not using SSL certs, comment the 2 below lines and uncomment above
      - traefik.http.routers.sabnzbd-rtr.entrypoints=https
      - traefik.http.routers.sabnzbd-rtr.tls.certresolver=letsencrypt
      - traefik.http.routers.sabnzbd-rtr.rule=Host(`sabnzbd.${DOMAIN_NAME}`) || (Host(`${DOMAIN_NAME}`) && PathPrefix(`/sabnzbd`))
      # ------------------------------------------------------------------------
      # HTTP Services
      - traefik.http.services.sabnzbd-svc.loadbalancer.server.port=8080
      - traefik.http.routers.sabnzbd-rtr.service=sabnzbd-svc
      # ------------------------------------------------------------------------
      # Middlewares
      - traefik.http.routers.sabnzbd-rtr.middlewares=chain-authelia@file
      # uncomment below and comment above if you don't wish to use oauth and mfa
      # - traefik.http.routers.sabnzbd-rtr.middlewares=chain-no-auth@file
      # ------------------------------------------------------------------------
    image: ghcr.io/hotio/sabnzbd:latest

  # nzbget - usenet downloader written in C++ (easynews)
  # Docs: https://hotio.dev/containers/nzbget/
  nzbget:
    container_name: nzbget
    hostname: nzbget
    restart: unless-stopped
    networks:
      apps: {}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/nzbget:/config
      - downloads:/data/downloads
    labels:
      - traefik.enable=true
      # ------------------------------------------------------------------------
      # HTTP Routers
      # - traefik.http.routers.nzbget-rtr.entrypoints=http
      # if not using SSL certs, comment the 2 below lines and uncomment above
      - traefik.http.routers.nzbget-rtr.entrypoints=https
      - traefik.http.routers.nzbget-rtr.tls.certresolver=letsencrypt
      - traefik.http.routers.nzbget-rtr.rule=Host(`nzbget.${DOMAIN_NAME}`) || (Host(`${DOMAIN_NAME}`) && PathPrefix(`/nzbget`))
      # ------------------------------------------------------------------------
      # HTTP Services
      - traefik.http.services.nzbget-svc.loadbalancer.server.port=6789
      - traefik.http.routers.nzbget-rtr.service=nzbget-svc
      # ------------------------------------------------------------------------
      # Middlewares
      - traefik.http.routers.nzbget-rtr.middlewares=chain-authelia@file
      # uncomment below and comment above if you don't wish to use oauth and mfa
      # - traefik.http.routers.nzbget-rtr.middlewares=chain-no-auth@file
      # ------------------------------------------------------------------------
    image: ghcr.io/hotio/nzbget:latest

  # qbittorrent - torrent download client with VPN built in
  # Docs: https://github.com/binhex/arch-qbittorrentvpn
  # Read the documentaton on proper setup of either wireguard or openvpn
  # This template is setup for wireguard
  qbittorrent:
    container_name: qbittorrent
    hostname: qbittorrent
    restart: unless-stopped
    privileged: true
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
    networks:
      apps: {}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
      # change below subnet to whatever you configure your docker network to
      - LAN_NETWORK=172.20.0.0/16
      - WEBUI_PORT=8080
      - VPN_ENABLED=yes
      - VPN_PROV=${VPN_PROV}
      # options below are openvpn or wireguard (I like wireguard)
      - VPN_CLIENT=wireguard
      - STRICT_PORT_FORWARD=yes
      - ENABLE_PRIVOXY=no
      - DEBUG=no
      - NAME_SERVERS=209.222.18.222,84.200.69.80,37.235.1.174,1.1.1.1,209.222.18.218,37.235.1.177
      - VPN_USER=${PIA_USERNAME}
      - VPN_PASS=${PIA_PASSWORD}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/qbittorrent:/config
      - downloads:/data/downloads
    labels:
      - traefik.enable=true
      # ------------------------------------------------------------------------
      # HTTP Routers
      # - traefik.http.routers.qbittorrent-rtr.entrypoints=http
      # if not using SSL certs, comment the 2 below lines and uncomment above
      - traefik.http.routers.qbittorrent-rtr.entrypoints=https
      - traefik.http.routers.qbittorrent-rtr.tls.certresolver=letsencrypt
      - traefik.http.routers.qbittorrent-rtr.rule=Host(`qbittorrent.${DOMAIN_NAME}`)
      # ------------------------------------------------------------------------
      # HTTP Services
      - traefik.http.services.qbittorrent-svc.loadbalancer.server.port=6789
      - traefik.http.routers.qbittorrent-rtr.service=qbittorrent-svc
      # ------------------------------------------------------------------------
      # Middlewares
      - traefik.http.routers.qbittorrent-rtr.middlewares=chain-authelia@file
      # uncomment below and comment above if you don't wish to use oauth and mfa
      # - traefik.http.routers.qbittorrent-rtr.middlewares=chain-no-auth@file
      # ------------------------------------------------------------------------
    image: binhex/arch-qbittorrentvpn:latest

networks:
  apps:
    driver: bridge
    ipam:
      config:
        - subnet: 172.22.0.0/24

volumes:
  # LOCAL Mounts
  downloads:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ${LOCAL_DL_DIR}

  data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ${DATA_DIR}

secrets:
  acme_email:
    file: ${SECRETS_DIR}/acme_email
  calibre_user:
    file: ${SECRETS_DIR}/calibre_user
  calibre_pass:
    file: ${SECRETS_DIR}/calibre_pass
  jwt:
    file: ${SECRETS_DIR}/jwt
  session:
    file: ${SECRETS_DIR}/session
  mysql:
    file: ${SECRETS_DIR}/mysql
  mysql_root:
    file: ${SECRETS_DIR}/mysql_root
  smtp:
    file: ${SECRETS_DIR}/smtp
  duo:
    file: ${SECRETS_DIR}/duo
  plex_claim:
    file: ${SECRETS_DIR}/plex_claim
  plex_4k_claim:
    file: ${SECRETS_DIR}/plex_4k_claim
  redis:
    file: ${SECRETS_DIR}/redis
  postgress:
    file: ${SECRETS_DIR}/postgress
  ldap:
    file: ${SECRETS_DIR}/ldap
  authmariadb_root_password:
    file: ${SECRETS_DIR}/authmariadb_root_password
  maxminddb:
    file: ${SECRETS_DIR}/maxminddb
