version: '3.3'
services:
  #-----------------------------------------------------------------------------
  # MANAGEMENT
  #-----------------------------------------------------------------------------

  # traefik - reverse proxy with letsencrypt built in
  # Docs: https://doc.traefik.io/traefik/
  traefik:
    container_name: traefikApps
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      apps: {}
    ports:
      - 80:80
      - 443:443
      - 8080:8080
    dns:
      - 1.1.1.1
      - 8.8.8.8
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
      # ------------------------------------------------------------------------
      - CLOUDFLARE_API_KEY=${CLOUDFLARE_API_KEY}
      - CLOUDFLARE_EMAIL=${CLOUDFLARE_EMAIL}
    command: # CLI arguments
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=true
      - --entryPoints.http.address=:80
      - --entryPoints.https.address=:443
      # ------------------------------------------------------------------------
      # Allow these IPs to set the X-Forwarded-* headers - Cloudflare IPs: https://www.cloudflare.com/ips/
      - --entrypoints.https.forwardedHeaders.trustedIPs=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/13,104.24.0.0/14,172.64.0.0/13,131.0.72.0/22
      # ------------------------------------------------------------------------
      - --entryPoints.traefik.address=:8080
      - --api=true
      - --serversTransport.insecureSkipVerify=true
      - --log=true
      # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      - --log.level=ERROR
      - --accessLog=true
      - --accessLog.filePath=/config/traefik.log
      - --accessLog.bufferingSize=100
      - --accessLog.filters.statusCodes=400-499
      - --providers.docker=true
      - --providers.docker.endpoint=unix:///var/run/docker.sock
      - --providers.docker.defaultrule=Host(`{{ index .Labels "com.docker.compose.service" }}.${DOMAIN_NAME}`)
      - --providers.docker.exposedByDefault=false
      - --providers.docker.network=media-apps-traefik_apps
      - --providers.docker.swarmMode=false
      - --providers.file.watch=true
      - --providers.file.directory=/config/rules
      # ------------------------------------------------------------------------
      # LetsEncrypt Staging Server - uncomment when testing
      # - --certificatesResolvers.letsencrypt.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory
      # ------------------------------------------------------------------------
      - --certificatesResolvers.letsencrypt.acme.email=${ACME_EMAIL}
      - --certificatesResolvers.letsencrypt.acme.storage=/config/acme.json
      - --certificatesResolvers.letsencrypt.acme.dnsChallenge.provider=${DNS_PROVIDER}
      - --certificatesresolvers.letsencrypt.acme.dnschallenge.delaybeforecheck=0
      # ------------------------------------------------------------------------
      # must use manual resolvers when using docker-compose otherwise validation fails
      - --certificatesResolvers.letsencrypt.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53
      # ------------------------------------------------------------------------
    labels:
      - traefik.enable=true
      # ------------------------------------------------------------------------
      - traefik.http.routers.http-catchall.entrypoints=http
      - traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)
      - traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https
      - traefik.http.routers.http-catchall.middlewares=redirect-to-https
      # ------------------------------------------------------------------------
      - traefik.http.routers.traefik-rtr.tls=true
      - traefik.http.routers.traefik-rtr.entrypoints=https
      - traefik.http.routers.traefik-rtr.tls.certresolver=letsencrypt
      # ------------------------------------------------------------------------
      - traefik.http.routers.traefik-rtr.rule=Host(`traefik.${DOMAIN_NAME}`)
      - traefik.http.routers.traefik-rtr.tls.domains[0].main=${DOMAIN_NAME}
      - traefik.http.routers.traefik-rtr.tls.domains[0].sans=*.${DOMAIN_NAME}
      - traefik.http.routers.traefik-rtr.service=api@internal
      - traefik.http.routers.traefik-rtr.middlewares=rate-limit@docker
      - traefik.http.routers.traefik-rtr.middlewares=secure-headers@docker
      # ------------------------------------------------------------------------
      - traefik.http.middlewares.rate-limit.rateLimit.average=100
      - traefik.http.middlewares.rate-limit.rateLimit.burst=50
      # ------------------------------------------------------------------------
      - traefik.http.middlewares.secure-headers.headers.frameDeny=true
      - traefik.http.middlewares.secure-headers.headers.stsIncludeSubdomains=true
      - traefik.http.middlewares.secure-headers.headers.stsPreload=true
      - traefik.http.middlewares.secure-headers.headers.stsSeconds=63072000
      - traefik.http.middlewares.secure-headers.headers.contentTypeNosniff=true
      - traefik.http.middlewares.secure-headers.headers.accessControlAllowMethods=GET, POST
      - traefik.http.middlewares.secure-headers.headers.accessControlAllowOriginList=https://${DOMAIN_NAME}, https://www.${DOMAIN_NAME}
      - traefik.http.middlewares.secure-headers.headers.accessControlMaxAge=100
      - traefik.http.middlewares.secure-headers.headers.addVaryheader=true
      - traefik.http.middlewares.secure-headers.headers.contentSecurityPolicy=script-src 'self'
      - traefik.http.middlewares.secure-headers.headers.referrerPolicy=origin-when-cross-origin
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - ${DOCKER_DIR}/traefik:/config
    image: traefik:latest

  cloudflareddns:
    container_name: cloudflareddns
    networks:
      apps: {}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
      - INTERVAL=300
      - DETECTION_MODE=dig-whoami.cloudflare
      - LOG_LEVEL=3
      - cloudflareddns
      - CF_USER=${CLOUDFLARE_EMAIL}
      - CF_APIKEY=${CLOUDFLARE_API_KEY}
      - CF_HOSTS=${DOMAIN_NAME}
      - CF_ZONES=${DOMAIN_NAME}
      - CF_RECORDTYPES=A;A
    volumes:
      - ${DOCKER_DIR}/cloudflareddns:/config
    image: cr.hotio.dev/hotio/cloudflareddns

  # organizr - WebApp portal for bookmarks, prevents multiple tabs
  # mostly used for sonarr and the like
  # docs: https://hub.docker.com/r/organizr/organizr
  organizr:
    container_name: organizr
    restart: unless-stopped
    networks:
      apps: {}
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - fpm=true
      - branch=v2-develop
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/organizr:/config
    labels:
      - traefik.enable=true
      - traefik.http.routers.organizr-rtr.entrypoints=https
      - traefik.http.routers.organizr-rtr.tls=true
      - traefik.http.routers.organizr-rtr.rule=Host(`organizr.${DOMAIN_NAME}`) || (Host(`${DOMAIN_NAME}`) && PathPrefix(`/organizr`))
      - traefik.http.services.organizr-svc.loadbalancer.server.port=80
      - traefik.http.routers.organizr-rtr.service=organizr-svc
      - traefik.http.routers.organizr-rtr.middlewares=rate-limit@docker
      - traefik.http.routers.organizr-rtr.middlewares=secure-headers@docker
      # - traefik.http.routers.organizr-rtr.middlewares=authelia@docker
      # ------------------------------------------------------------------------
    image: ghcr.io/organizr/organizr:latest

  #-----------------------------------------------------------------------------
  # OAUTH and MFA
  #-----------------------------------------------------------------------------
  # Comment or delete this section if you're not interested in oauth or MFA.
  # It is recommended as it adds a layer of security to your applications,
  # specially if they're internet facing.
  #-----------------------------------------------------------------------------

  # redis - session database (more performance)
  # default run PUID is 1001 and PGID is root(0)
  # cant seem to change it, folder permissions need to be set accordingly
  authredis:
    container_name: authredis
    restart: unless-stopped
    networks:
      apps: {}
    environment:
      - TZ=${TZ}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/authredis:/bitnami/redis/data
      - ${DOCKER_DIR}/authredis/redis.conf:/opt/bitnami/redis/mounted-etc/redis.conf
    secrets:
      - redis
    command: /opt/bitnami/scripts/redis/run.sh --requirepass ${REDIS_PASSWORD}
    image: bitnami/redis:latest

  # mariadb - used for authelia storage
  authmariadb:
    container_name: authmariadb
    restart: unless-stopped
    networks:
      apps: {}
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK_SET=022
      - UMASK=022
      - FILE__MYSQL_ROOT_PASSWORD=/run/secrets/mysql_root
      - FILE__MYSQL_PASSWORD=/run/secrets/mysql
      - MYSQL_DATABASE=authelia
      - MYSQL_USER=authelia
    secrets:
      - mysql
      - mysql_root
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/authmariadb:/config
    image: ghcr.io/linuxserver/mariadb:latest

  # Authelia - Self-Hosted Single Sign-On and Two-Factor Authentication
  # Docs: https://www.authelia.com/docs/
  authelia:
    container_name: authelia
    restart: unless-stopped
    networks:
      apps: {}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/authelia:/config
    environment:
      - TZ=${TZ}
      - AUTHELIA_JWT_SECRET_FILE=/run/secrets/jwt
      - AUTHELIA_SESSION_SECRET_FILE=/run/secrets/session
      - AUTHELIA_STORAGE_MYSQL_PASSWORD_FILE=/run/secrets/mysql
      - AUTHELIA_NOTIFIER_SMTP_PASSWORD_FILE=/run/secrets/smtp
      - AUTHELIA_DUO_API_SECRET_KEY_FILE=/run/secrets/duo
      - AUTHELIA_SESSION_REDIS_PASSWORD_FILE=/run/secrets/redis
      - AUTHELIA_STORAGE_POSTGRES_PASSWORD_FILE=/run/secrets/postgress
      - AUTHELIA_AUTHENTICATION_BACKEND_LDAP_PASSWORD_FILE=/run/secrets/ldap
    labels:
      - traefik.enable=true
      # ------------------------------------------------------------------------
      - traefik.http.routers.authelia-rtr.entrypoints=https
      - traefik.http.routers.authelia-rtr.tls=true
      # ------------------------------------------------------------------------
      - traefik.http.routers.authelia-rtr.rule=Host(`authelia.${DOMAIN_NAME}`) || (Host(`${DOMAIN_NAME}`) && PathPrefix(`/authelia`))
      - traefik.http.services.authelia-svc.loadbalancer.server.port=9091
      - traefik.http.routers.authelia-rtr.service=authelia-svc
      - traefik.http.middlewares.authelia.forwardauth.address=http://authelia:9091/api/verify?rd=https://authelia.${DOMAIN_NAME}/
      - traefik.http.middlewares.authelia.forwardauth.trustForwardHeader=true
      - traefik.http.middlewares.authelia.forwardauth.authResponseHeaders=Remote-User, Remote-Groups, Remote-Name, Remote-Email
      - traefik.http.middlewares.authelia-basic.forwardauth.address=http://authelia:9091/api/verify?auth=basic
      - traefik.http.middlewares.authelia-basic.forwardauth.trustForwardHeader=true
      - traefik.http.middlewares.authelia-basic.forwardauth.authResponseHeaders=Remote-User, Remote-Groups, Remote-Name, Remote-Email
      # ------------------------------------------------------------------------
    secrets:
      - jwt
      - session
      - mysql
      - smtp
      - duo
      - redis
      - postgress
      - ldap
    depends_on:
      - authredis
      - authmariadb
    image: authelia/authelia:latest

  #-----------------------------------------------------------------------------
  # DOWNLOADS
  #-----------------------------------------------------------------------------
  # sabnzbd - usenet downloader written in python (easynews)
  # Docs: https://hotio.dev/containers/sabnzbd/
  sabnzbd:
    container_name: sabnzbd
    restart: unless-stopped
    networks:
      apps: {}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/sabnzbd:/config
      - ${DOWNLOAD_DIR}:/data/downloads
    labels:
      - traefik.enable=true
      - traefik.http.routers.sabnzbd-rtr.entrypoints=https
      - traefik.http.routers.sabnzbd-rtr.tls=true
      - traefik.http.routers.sabnzbd-rtr.rule=Host(`sabnzbd.${DOMAIN_NAME}`) || (Host(`${DOMAIN_NAME}`) && PathPrefix(`/sabnzbd`))
      - traefik.http.services.sabnzbd-svc.loadbalancer.server.port=8080
      - traefik.http.routers.sabnzbd-rtr.service=sabnzbd-svc
      - traefik.http.routers.sabnzbd-rtr.middlewares=rate-limit@docker
      - traefik.http.routers.sabnzbd-rtr.middlewares=secure-headers@docker
      # - traefik.http.routers.sabnzbd-rtr.middlewares=authelia@docker
      # ------------------------------------------------------------------------
    image: cr.hotio.dev/hotio/sabnzbd:testing

  # nzbget - usenet downloader written in C++ (easynews)
  # Docs: https://hotio.dev/containers/nzbget/
  nzbget:
    container_name: nzbget
    restart: unless-stopped
    networks:
      apps: {}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/nzbget:/config
      - ${DOWNLOAD_DIR}:/data/downloads
    labels:
      - traefik.enable=true
      - traefik.http.routers.nzbget-rtr.entrypoints=https
      - traefik.http.routers.nzbget-rtr.tls=true
      - traefik.http.routers.nzbget-rtr.rule=Host(`nzbget.${DOMAIN_NAME}`) || (Host(`${DOMAIN_NAME}`) && PathPrefix(`/nzbget`))
      - traefik.http.services.nzbget-svc.loadbalancer.server.port=6789
      - traefik.http.routers.nzbget-rtr.service=nzbget-svc
      - traefik.http.routers.nzbget-rtr.middlewares=rate-limit@docker
      - traefik.http.routers.nzbget-rtr.middlewares=secure-headers@docker
      # - traefik.http.routers.nzbget-rtr.middlewares=authelia@docker
      # ------------------------------------------------------------------------
    image: cr.hotio.dev/hotio/nzbget:testing

  # qbittorrent - torrent download client with VPN built in
  # Docs: https://github.com/binhex/arch-qbittorrentvpn
  # Read the documentaton on proper setup of either wireguard or openvpn
  # This template is setup for wireguard
  qb:
    container_name: qb
    restart: unless-stopped
    cap_add:
      - NET_ADMIN
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
      - net.ipv6.conf.all.disable_ipv6=1
    networks:
      apps: {}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
      - VPN_ENABLED=true
      - VPN_LAN_NETWORK=172.20.0.0/20
      - WEBUI_PORTS=8081/tcp
      - VPN_CONF=wg0
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/qbittorrent:/config
      - ${DOWNLOAD_DIR}:/data/downloads
    labels:
      - traefik.enable=true
      - traefik.http.services.qb-svc.loadbalancer.server.port=8081
      - traefik.http.services.qb-svc.loadbalancer.passhostheader=false
      - traefik.http.routers.qb-rtr.entrypoints=https
      - traefik.http.routers.qb-rtr.tls=true
      - traefik.http.routers.qb-rtr.rule=Host(`qb.${DOMAIN_NAME}`) || Host(`${DOMAIN_NAME}`) && PathPrefix(`/qb`)
      - traefik.http.middlewares.qb-redirect.redirectregex.regex=^(.*)/qb$$
      - traefik.http.middlewares.qb-redirect.redirectregex.replacement=$$1/qb/
      - traefik.http.middlewares.qb-strip.stripprefix.prefixes=/qb/
      - traefik.http.middlewares.qb-headers.headers.customrequestheaders.X-Frame-Options=SAMEORIGIN
      - traefik.http.middlewares.qb-headers.headers.customrequestheaders.Referer=
      - traefik.http.middlewares.qb-headers.headers.customrequestheaders.Origin=
      - traefik.http.routers.qb-rtr.middlewares=qb-strip,qb-redirect,qb-headers
      - traefik.http.routers.qb-rtr.service=qb-svc
      - traefik.http.routers.qb-rtr.middlewares=rate-limit@docker
      - traefik.http.routers.qb-rtr.middlewares=secure-headers@docker
      # - traefik.http.routers.qb-rtr.middlewares=authelia@docker
      # ------------------------------------------------------------------------
    image: cr.hotio.dev/hotio/qbittorrent

  # nzbhydra2 - usenet and torsnab indexer proxy
  # Docs: https://hotio.dev/containers/nzbhydra2/
  nzbhydra2:
    container_name: nzbhydra2
    restart: unless-stopped
    networks:
      apps: {}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/nzbhydra2:/config
      - ${DOWNLOAD_DIR}:/data/downloads
    labels:
      - traefik.enable=true
      - traefik.http.routers.nzbhydra2-rtr.entrypoints=https
      - traefik.http.routers.nzbhydra2-rtr.tls=true
      - traefik.http.routers.nzbhydra2-rtr.rule=Host(`nzbhydra2.${DOMAIN_NAME}`) || (Host(`${DOMAIN_NAME}`) && PathPrefix(`/nzbhydra2`))
      - traefik.http.services.nzbhydra2-svc.loadbalancer.server.port=5076
      - traefik.http.routers.nzbhydra2-rtr.service=nzbhydra2-svc
      - traefik.http.routers.nzbhydra2-rtr.middlewares=rate-limit@docker
      - traefik.http.routers.nzbhydra2-rtr.middlewares=secure-headers@docker
      # - traefik.http.routers.nzbhydra2-rtr.middlewares=authelia@docker
      # ------------------------------------------------------------------------
    image: cr.hotio.dev/hotio/nzbhydra2:testing

  # prowlarr - usenet and torsnab indexer proxy
  # Docs: hhttps://hotio.dev/containers/prowlarr/
  prowlarr:
    container_name: prowlarr
    restart: unless-stopped
    networks:
      network_apps: {}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/prowlarr:/config
    labels:
      - traefik.enable=true
      - traefik.http.routers.prowlarr-rtr.entrypoints=https
      - traefik.http.routers.prowlarr-rtr.tls=true
      - traefik.http.routers.prowlarr-rtr.rule=Host(`prowlarr.${DOMAIN_NAME}`) || (Host(`${DOMAIN_NAME}`) && PathPrefix(`/prowlarr`))
      - traefik.http.services.prowlarr-svc.loadbalancer.server.port=5076
      - traefik.http.routers.prowlarr-rtr.service=prowlarr-svc
      - traefik.http.routers.prowlarr-rtr.middlewares=rate-limit@docker
      - traefik.http.routers.prowlarr-rtr.middlewares=secure-headers@docker
      # - traefik.http.routers.prowlarr-rtr.middlewares=authelia@docker
      # ------------------------------------------------------------------------
    image: cr.hotio.dev/hotio/prowlarr:nightly

  # trackarr - Tracker announcements to Sonarr/Radarr/Lidarr.
  # Docs: https://hotio.dev/containers/trackarr/
  trackarr:
    container_name: trackarr
    restart: unless-stopped
    networks:
      apps: {}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
      - DEBUG=no
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - ${DOCKER_DIR}/lidarr/90-config:/etc/cont-init.d/90-config
      - ${DOCKER_DIR}/trackarr:/config
    labels:
      - traefik.enable=true
      - traefik.http.routers.trackarr-rtr.entrypoints=https
      - traefik.http.routers.trackarr-rtr.tls=true
      - traefik.http.routers.trackarr-rtr.rule=Host(`trackarr.${DOMAIN_NAME}`) || (Host(`${DOMAIN_NAME}`) && PathPrefix(`/trackarr`))
      - traefik.http.services.trackarr-svc.loadbalancer.server.port=7337
      - traefik.http.routers.trackarr-rtr.service=trackarr-svc
      - traefik.http.routers.trackarr-rtr.middlewares=rate-limit@docker
      - traefik.http.routers.trackarr-rtr.middlewares=secure-headers@docker
      # - traefik.http.routers.trackarr-rtr.middlewares=authelia@docker
      # ------------------------------------------------------------------------
    image: cr.hotio.dev/hotio/trackarr:nightly

  # overseerr a chatbot used to simplify using services like Sonarr/Radarr/Ombi via the use of chat!
  # Docs: https://hotio.dev/containers/overseerr/
  overseerr:
    container_name: overseerr
    restart: unless-stopped
    networks:
      network_apps: {}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
      - DEBUG=no
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/overseerr:/config
    labels:
      - traefik.enable=true
      - traefik.http.routers.overseerr-rtr.entrypoints=https
      - traefik.http.routers.overseerr-rtr.tls=true
      - traefik.http.routers.overseerr-rtr.rule=Host(`overseerr.${DOMAIN_NAME}`) || (Host(`${DOMAIN_NAME}`) && PathPrefix(`/overseerr`))
      - traefik.http.services.overseerr-svc.loadbalancer.server.port=7337
      - traefik.http.routers.overseerr-rtr.service=overseerr-svc
      - traefik.http.routers.overseerr-rtr.middlewares=rate-limit@docker
      - traefik.http.routers.overseerr-rtr.middlewares=secure-headers@docker
      # - traefik.http.routers.overseerr-rtr.middlewares=authelia@docker
      # ------------------------------------------------------------------------
    image: cr.hotio.dev/hotio/overseerr:testing

  # unpackerr - This application runs as a daemon on your download host. It checks for completed
  # downloads and extracts them so Radarr and/or Sonarr and/or Lidarr may import them.
  # Docs: https://hotio.dev/containers/requestrr/
  unpackerr:
    container_name: unpackerr
    restart: unless-stopped
    networks:
      apps: {}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
      - DEBUG=no
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/unpackerr:/config
      - ${DATA_DIR}:/data
      - ${DOWNLOAD_DIR}:/data/downloads
    image: cr.hotio.dev/hotio/unpackerr:testing

  #-----------------------------------------------------------------------------
  # MEDIA
  #-----------------------------------------------------------------------------

  # plex - media server
  # Docs: https://hotio.dev/containers/plex/
  plex:
    container_name: plex
    restart: unless-stopped
    networks:
      apps: {}
    ports:
      - 32400:32400/tcp
    environment:
      - TZ=${TZ}
      - PLEX_UID=${PUID}
      - PLEX_GID=${PGID}
      - PUID=${PUID}
      - PGID=${PGID}
      - PLEX_CLAIM=${PLEX_CLAIM}
      - PLEX_PASS=yes
      - ADVERTISE_IP=${PLEX_ADVERTISE_IP}
      #-------------------------------------------------------------------------
      # If you have an nvidia GPU
      #-------------------------------------------------------------------------
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,video,utility
      #-------------------------------------------------------------------------
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/plex:/config
      - ${DOCKER_DIR}/plex-transcode:/transcode
      - ${DATA_DIR}:/data
    labels:
      - traefik.enable=true
      - traefik.http.routers.plex-rtr.entrypoints=https
      - traefik.http.routers.plex-rtr.tls=true
      - traefik.http.routers.plex-rtr.rule=Host(`plex.${DOMAIN_NAME}`) || (Host(`${DOMAIN_NAME}`) && PathPrefix(`/plex`))
      - traefik.http.services.plex-svc.loadbalancer.server.port=32400
      - traefik.http.routers.plex-rtr.service=plex-svc
      - traefik.http.routers.plex-rtr.middlewares=rate-limit@docker
      - traefik.http.routers.plex-rtr.middlewares=secure-headers@docker
      # - traefik.http.routers.plex-rtr.middlewares=authelia@docker
      #-----------------------------------------------------------------------------
      - traefik.http.services.webtools-svc.loadbalancer.server.port=33443
      - traefik.http.services.webtools-svc.loadbalancer.server.scheme=https
      - traefik.http.routers.webtools-rtr.entrypoints=https
      - traefik.http.routers.webtools-rtr.tls=true
      - traefik.http.routers.webtools-rtr.rule=Host(`webtools.${DOMAIN_NAME}`)
      - traefik.http.routers.webtools-rtr.service=webtools-svc
      - traefik.http.routers.webtools-rtr.middlewares=rate-limit@docker
      - traefik.http.routers.webtools-rtr.middlewares=secure-headers@docker
      #-----------------------------------------------------------------------------
      - traefik.http.services.notifiarr-svc.loadbalancer.server.port=5454
      - traefik.http.routers.notifiarr-rtr.entrypoints=https
      - traefik.http.routers.notifiarr-rtr.tls=true
      - traefik.http.routers.notifiarr-rtr.rule=Host(`notifiarr.${DOMAIN_NAME}`) || Host(`${DOMAIN_NAME}`) && PathPrefix(`/notifiarr`)
      - traefik.http.routers.notifiarr-rtr.service=notifiarr-svc
      - traefik.http.routers.notifiarr-rtr.middlewares=rate-limit@docker
      - traefik.http.routers.notifiarr-rtr.middlewares=secure-headers@docker
      #-----------------------------------------------------------------------------
      - traefik.http.services.tautulli-svc.loadbalancer.server.port=8181
      - traefik.http.routers.tautulli-rtr.entrypoints=https
      - traefik.http.routers.tautulli-rtr.tls=true
      - traefik.http.routers.tautulli-rtr.rule=Host(`tautulli.${DOMAIN_NAME}`) || Host(`${DOMAIN_NAME}`) && PathPrefix(`/tautulli`)
      - traefik.http.routers.tautulli-rtr.service=tautulli-svc
      - traefik.http.routers.tautulli-rtr.middlewares=rate-limit@docker
      - traefik.http.routers.tautulli-rtr.middlewares=secure-headers@docker
    image: cr.hotio.dev/hotio/plex:release

  notifiarr:
    container_name: notifiarr
    restart: unless-stopped
    network_mode: service:plex
    # ports:
    #   - 5454:5454
    volumes:
      - ${DOCKER_DIR}/notifiarr:/config
      - /var/run/utmp:/var/run/utmp
    image: golift/notifiarr

  # tautulli - plex monitor
  # Docs: https://hotio.dev/containers/tautulli/
  tautulli:
    container_name: tautulli
    restart: unless-stopped
    network_mode: service:plex
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
      - UMASK=022
    links:
      - plex
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/tautulli:/config
    image: cr.hotio.dev/hotio/tautulli:testing

  # autoscan - replaces the default Plex behaviour for picking up file changes on the file system
  # Docs: https://github.com/Cloudbox/autoscan
  autoscan:
    container_name: autoscan
    restart: unless-stopped
    networks:
      apps: {}
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
      - UMASK=022
      - DEBUG=yes
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/autoscan:/config
      - ${DATA_DIR}:/data
    image: cr.hotio.dev/hotio/autoscan:nightly

  # bazarr - automatic download subtitles
  # Docs: https://hotio.dev/containers/bazarr/
  bazarr:
    container_name: bazarr
    restart: unless-stopped
    networks:
      apps: {}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
    links:
      - plex
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/bazarr:/config
      - ${DATA_DIR}:/data
    labels:
      - traefik.enable=true
      - traefik.http.routers.bazarr-rtr.entrypoints=https
      - traefik.http.routers.bazarr-rtr.tls=true
      - traefik.http.routers.bazarr-rtr.rule=Host(`bazarr.${DOMAIN_NAME}`) || (Host(`${DOMAIN_NAME}`) && PathPrefix(`/bazarr`))
      - traefik.http.services.bazarr-svc.loadbalancer.server.port=6767
      - traefik.http.routers.bazarr-rtr.service=bazarr-svc
      - traefik.http.routers.bazarr-rtr.middlewares=rate-limit@docker
      - traefik.http.routers.bazarr-rtr.middlewares=secure-headers@docker
      # - traefik.http.routers.bazarr-rtr.middlewares=authelia@docker
      # ------------------------------------------------------------------------
    image: cr.hotio.dev/hotio/bazarr:nightly

  # bazarr - automatic download subtitles
  # Docs: https://hotio.dev/containers/bazarr/
  bazarr-4k:
    container_name: bazarr-4k
    restart: unless-stopped
    networks:
      apps: {}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
    links:
      - plex-4k
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/bazarr-4k:/config
      - ${DATA_DIR}:/data
    labels:
      - traefik.enable=true
      - traefik.http.routers.bazarr-4k-rtr.entrypoints=https
      - traefik.http.routers.bazarr-4k-rtr.tls=true
      - traefik.http.routers.bazarr-4k-rtr.rule=Host(`bazarr-4k.${DOMAIN_NAME}`) || (Host(`${DOMAIN_NAME}`) && PathPrefix(`/bazarr-4k`))
      - traefik.http.services.bazarr-4k-svc.loadbalancer.server.port=6767
      - traefik.http.routers.bazarr-4k-rtr.service=bazarr-4k-svc
      - traefik.http.routers.bazarr-4k-rtr.middlewares=rate-limit@docker
      - traefik.http.routers.bazarr-4k-rtr.middlewares=secure-headers@docker
      # - traefik.http.routers.bazarr-4k-rtr.middlewares=authelia@docker
      # ------------------------------------------------------------------------
    image: cr.hotio.dev/hotio/bazarr:nightly

  # sonarr - TV Shows
  # Docs: https://hotio.dev/containers/sonarr/
  sonarr:
    container_name: sonarr
    restart: unless-stopped
    networks:
      apps: {}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/sonarr:/config
      - ${DATA_DIR}:/data
    depends_on:
      - nzbhydra2
      - nzbget
      - sabnzbd
      - qbittorrent
    labels:
      - traefik.enable=true
      - traefik.http.routers.sonarr-rtr.entrypoints=https
      - traefik.http.routers.sonarr-rtr.tls=true
      - traefik.http.routers.sonarr-rtr.rule=Host(`sonarr.${DOMAIN_NAME}`) || (Host(`${DOMAIN_NAME}`) && PathPrefix(`/sonarr`))
      - traefik.http.services.sonarr-svc.loadbalancer.server.port=8989
      - traefik.http.routers.sonarr-rtr.service=sonarr-svc
      - traefik.http.routers.sonarr-rtr.middlewares=rate-limit@docker
      - traefik.http.routers.sonarr-rtr.middlewares=secure-headers@docker
      # - traefik.http.routers.sonarr-rtr.middlewares=authelia@docker
      # ------------------------------------------------------------------------
    image: cr.hotio.dev/hotio/sonarr:nightly

  # sonarr - TV Shows
  # Docs: https://hotio.dev/containers/sonarr/
  sonarr-4k:
    container_name: sonarr-4k
    restart: unless-stopped
    networks:
      apps: {}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/sonarr-4k:/config
      - ${DATA_DIR}:/data
    depends_on:
      - nzbhydra2
      - nzbget
      - sabnzbd
      - qbittorrent
    labels:
      - traefik.enable=true
      - traefik.http.routers.sonarr-4k-rtr.entrypoints=https
      - traefik.http.routers.sonarr-4k-rtr.tls=true
      - traefik.http.routers.sonarr-4k-rtr.rule=Host(`sonarr-4k.${DOMAIN_NAME}`) || (Host(`${DOMAIN_NAME}`) && PathPrefix(`/sonarr-4k`))
      - traefik.http.services.sonarr-4k-svc.loadbalancer.server.port=8989
      - traefik.http.routers.sonarr-4k-rtr.service=sonarr-4k-svc
      - traefik.http.routers.sonarr-4k-rtr.middlewares=rate-limit@docker
      - traefik.http.routers.sonarr-4k-rtr.middlewares=secure-headers@docker
      # - traefik.http.routers.sonarr-4k-rtr.middlewares=authelia@docker
      # ------------------------------------------------------------------------
    image: cr.hotio.dev/hotio/sonarr:nightly

  # radarr - Movies
  # Docs: https://hotio.dev/containers/radarr/
  radarr:
    container_name: radarr
    restart: unless-stopped
    networks:
      apps: {}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/radarr:/config
      - ${DATA_DIR}:/data
    depends_on:
      - nzbhydra2
      - nzbget
      - sabnzbd
      - qbittorrent
    labels:
      - traefik.enable=true
      - traefik.http.routers.radarr-rtr.entrypoints=https
      - traefik.http.routers.radarr-rtr.tls=true
      - traefik.http.routers.radarr-rtr.rule=Host(`radarr.${DOMAIN_NAME}`) || (Host(`${DOMAIN_NAME}`) && PathPrefix(`/radarr`))
      - traefik.http.services.radarr-svc.loadbalancer.server.port=7878
      - traefik.http.routers.radarr-rtr.service=radarr-svc
      - traefik.http.routers.radarr-rtr.middlewares=rate-limit@docker
      - traefik.http.routers.radarr-rtr.middlewares=secure-headers@docker
      # - traefik.http.routers.radarr-rtr.middlewares=authelia@docker
      # ------------------------------------------------------------------------
    image: cr.hotio.dev/hotio/radarr:nightly

  # radarr - Movies
  # Docs: https://hotio.dev/containers/radarr/
  radarr-4k:
    container_name: radarr-4k
    restart: unless-stopped
    networks:
      apps: {}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/radarr-4k:/config
      - ${DATA_DIR}:/data
    depends_on:
      - nzbhydra2
      - nzbget
      - sabnzbd
      - qbittorrent
    labels:
      - traefik.enable=true
      - traefik.http.routers.radarr-4k-rtr.entrypoints=https
      - traefik.http.routers.radarr-4k-rtr.tls=true
      - traefik.http.routers.radarr-4k-rtr.rule=Host(`radarr-4k.${DOMAIN_NAME}`) || (Host(`${DOMAIN_NAME}`) && PathPrefix(`/radarr-4k`))
      - traefik.http.services.radarr-4k-svc.loadbalancer.server.port=7878
      - traefik.http.routers.radarr-4k-rtr.service=radarr-4k-svc
      - traefik.http.routers.radarr-4k-rtr.middlewares=rate-limit@docker
      - traefik.http.routers.radarr-4k-rtr.middlewares=secure-headers@docker
      # - traefik.http.routers.radarr-4k-rtr.middlewares=authelia@docker
      # ------------------------------------------------------------------------
    image: cr.hotio.dev/hotio/radarr:nightly

  # lidarr - Music
  # Docs: https://hotio.dev/containers/lidarr/
  lidarr:
    container_name: lidarr
    restart: unless-stopped
    networks:
      apps: {}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/lidarr:/config
      - /var/run/docker.sock:/var/run/docker.sock
      - ${DOCKER_DIR}/lidarr/90-config:/etc/cont-init.d/90-config
      - ${DATA_DIR}:/data
    depends_on:
      - nzbhydra2
      - nzbget
      - sabnzbd
      - qbittorrent
    links:
      - amd
    labels:
      - traefik.enable=true
      - traefik.http.routers.lidarr-rtr.entrypoints=https
      - traefik.http.routers.lidarr-rtr.tls=true
      - traefik.http.routers.lidarr-rtr.rule=Host(`lidarr.${DOMAIN_NAME}`) || (Host(`${DOMAIN_NAME}`) && PathPrefix(`/lidarr`))
      - traefik.http.services.lidarr-svc.loadbalancer.server.port=8686
      - traefik.http.routers.lidarr-rtr.service=lidarr-svc
      - traefik.http.routers.lidarr-rtr.middlewares=rate-limit@docker
      - traefik.http.routers.lidarr-rtr.middlewares=secure-headers@docker
      # - traefik.http.routers.lidarr-rtr.middlewares=authelia@docker
      # ------------------------------------------------------------------------
    image: cr.hotio.dev/hotio/lidarr:nightly

  # amd - is a Lidarr companion script to automatically download music for Lidarr
  # Docs: https://github.com/RandomNinjaAtk/docker-amd
  amd:
    container_name: amd
    restart: unless-stopped
    networks:
      network_apps: {}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
      - AUTOSTART=true
      - SCRIPTINTERVAL=1h
      - DOWNLOADMODE=wanted
      - FALLBACKSEARCH=True
      - LIST=missing
      - SearchType=both
      - Concurrency=1
      - EMBEDDED_COVER_QUALITY=80
      - FORMAT=FLAC
      - BITRATE=320
      - ENABLEPOSTPROCESSING=true
      - FORCECONVERT=false
      - requirequality=true
      - MatchDistance=10
      - replaygain=true
      - FolderPermissions=755
      - FilePermissions=664
      - MBRAINZMIRROR=https://musicbrainz.org
      - MBRATELIMIT=1
      - LidarrUrl=http://lidarr:8686/lidarr
      - LidarrAPIkey=${LIDARR_API_KEY}
      - ARL_TOKEN=${ARL_DEEZER_TOKEN}
      - NOTIFYPLEX=true
      - PLEXLIBRARYNAME=Music
      - PLEXURL=http://plex:32400
      - PLEXTOKEN=${PLEX_TOKEN}
      - POSTPROCESSTHREADS=4
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/amd:/config
      - ${DOWNLOAD_DIR}/ama:/downloads-amd
    image: randomninjaatk/amd:latest

  # amvd - is a Lidarr companion script to automatically download music videos
  # Docs: https://github.com/RandomNinjaAtk/docker-amvd
  amvd:
    container_name: amvd
    restart: unless-stopped
    networks:
      network_apps: {}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
      - AUTOSTART=true
      - SCRIPTINTERVAL=1h
      - replaygain=true
      - FolderPermissions=755
      - FilePermissions=664
      - MBRATELIMIT=1
      - LidarrUrl=http://lidarr:8686/lidarr
      - LidarrAPIkey=${LIDARR_API_KEY}
      - SOURCE_CONNECTION=lidarr
      - CountryCode=us
      - RequireVideoMatch=true
      - subtitlelanguage=en
      - videofilter="live"
      - WriteNFOs=true
      - USEFOLDERS=true
      - USEVIDEOFOLDERS=true
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/amvd:/config
      - ${MEDIA_DIR}/Music-Videos:/downloads-amvd
    image: randomninjaatk/amvd:latest

  # beets - Music tagger
  # Docs: https://hub.docker.com/r/linuxserver/beets
  beets:
    container_name: beets
    restart: unless-stopped
    networks:
      network_apps: {}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/beets:/config
      - ${DATA_DIR}:/data
    image: ghcr.io/linuxserver/beets:nightly

  # readarr - eBooks
  # Docs: https://hotio.dev/containers/readarr/
  readarr:
    container_name: readarr
    restart: unless-stopped
    networks:
      apps: {}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
      - calibre
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/readarr:/config
      - ${DATA_DIR}:/data
    depends_on:
      - nzbhydra2
      - nzbget
      - sabnzbd
      - qbittorrent
    labels:
      - traefik.enable=true
      - traefik.http.routers.readarr-rtr.entrypoints=https
      - traefik.http.routers.readarr-rtr.tls=true
      - traefik.http.routers.readarr-rtr.rule=Host(`readarr.${DOMAIN_NAME}`) || (Host(`${DOMAIN_NAME}`) && PathPrefix(`/readarr`))
      - traefik.http.services.readarr-svc.loadbalancer.server.port=8787
      - traefik.http.routers.readarr-rtr.service=readarr-svc
      - traefik.http.routers.readarr-rtr.middlewares=rate-limit@docker
      - traefik.http.routers.readarr-rtr.middlewares=secure-headers@docker
      # - traefik.http.routers.readarr-rtr.middlewares=authelia@docker
      # ------------------------------------------------------------------------
    image: cr.hotio.dev/hotio/readarr:nightly

  # readarr - eBooks
  # Docs: https://hotio.dev/containers/readarr/
  # This version for audiobooks
  readarr-ab:
    container_name: readarr-ab
    restart: unless-stopped
    networks:
      network_apps: {}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/readarr-ab:/config
      - ${DATA_DIR}:/data
      - ${DOWNLOAD_DIR}:/data/downloads
    depends_on:
      - nzbhydra2
      - sabnzbd
    labels:
      - traefik.enable=true
      - traefik.http.routers.readarr-ab-rtr.entrypoints=https
      - traefik.http.routers.readarr-rtr.tls=true
      - traefik.http.routers.readarr-ab-rtr.rule=Host(`readarr-ab.${DOMAIN_NAME}`) || (Host(`${DOMAIN_NAME}`) && PathPrefix(`/readarr-ab`))
      - traefik.http.services.readarr-ab-svc.loadbalancer.server.port=8787
      - traefik.http.routers.readarr-ab-rtr.service=readarr-ab-svc
      - traefik.http.routers.readarr-ab-rtr.middlewares=rate-limit@docker
      - traefik.http.routers.readarr-ab-rtr.middlewares=secure-headers@docker
      # - traefik.http.routers.readarr-ab-rtr.middlewares=authelia@docker
      # ------------------------------------------------------------------------
    image: cr.hotio.dev/hotio/readarr:nightly

  # mylar3 - Comics
  # Docs: https://hotio.dev/containers/mylar3/
  mylar3:
    container_name: mylar3
    restart: unless-stopped
    networks:
      apps: {}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/mylar3:/config
      # TEMP DIR for DDL Downloads
      - ${DOCKER_DIR}/mylar3/downloads:/downloads
      - ${DATA_DIR}:/data
    depends_on:
      - nzbhydra2
      - nzbget
      - sabnzbd
      - qbittorrent
    labels:
      - traefik.enable=true
      - traefik.http.routers.mylar3-rtr.entrypoints=https
      - traefik.http.routers.mylar3-rtr.tls=true
      - traefik.http.routers.mylar3-rtr.rule=Host(`mylar3.${DOMAIN_NAME}`) || (Host(`${DOMAIN_NAME}`) && PathPrefix(`/mylar3`))
      - traefik.http.services.mylar3-svc.loadbalancer.server.port=8090
      - traefik.http.routers.mylar3-rtr.service=mylar3-svc
      - traefik.http.routers.mylar3-rtr.middlewares=rate-limit@docker
      - traefik.http.routers.mylar3-rtr.middlewares=secure-headers@docker
      # - traefik.http.routers.mylar3-rtr.middlewares=authelia@docker
      # ------------------------------------------------------------------------
    image: cr.hotio.dev/hotio/mylar3:nightly

  # calibre - ebook management database
  # docs: https://hub.docker.com/r/linuxserver/calibre
  calibre:
    container_name: calibre
    restart: unless-stopped
    networks:
      apps: {}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
      - GUAC_USER=${GUAC_USER}
      - GUAC_PASS=${GUAC_PASS}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/calibre:/config
      - ${DATA_DIR}:/data
    labels:
      - traefik.enable=true
      - traefik.http.routers.calibre-rtr.entrypoints=https
      - traefik.http.routers.calibre-rtr.tls=true
      - traefik.http.routers.calibre-rtr.rule=Host(`calibre.${DOMAIN_NAME}`) || (Host(`${DOMAIN_NAME}`) && PathPrefix(`/calibre`))
      - traefik.http.services.calibre-svc.loadbalancer.server.port=8080
      - traefik.http.routers.calibre-rtr.service=calibre-svc
      - traefik.http.routers.calibre-rtr.middlewares=rate-limit@docker
      - traefik.http.routers.calibre-rtr.middlewares=secure-headers@docker
      # - traefik.http.routers.calibre-rtr.middlewares=authelia@docker
      # ------------------------------------------------------------------------
    image: ghcr.io/linuxserver/calibre:latest

  # calibre-web - web frontend for calibre
  # docs: https://hub.docker.com/r/linuxserver/calibre-web
  calibre-web:
    container_name: calibre-web
    restart: unless-stopped
    networks:
      apps: {}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
      - DOCKER_MODS=ghcr.io/linuxserver/calibre-web:calibre
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/calibre-web:/config
      - ${DATA_DIR}:/data
    labels:
      - traefik.enable=true
      - traefik.http.routers.calibre-web-rtr.entrypoints=https
      - traefik.http.routers.calibre-web-rtr.tls=true
      - traefik.http.routers.calibre-web-rtr.rule=Host(`calibre-web.${DOMAIN_NAME}`) || (Host(`${DOMAIN_NAME}`) && PathPrefix(`/calibre-web`))
      - traefik.http.services.calibre-web-svc.loadbalancer.server.port=8083
      - traefik.http.routers.calibre-web-rtr.service=calibre-web-svc
      - traefik.http.routers.calibre-web-rtr.middlewares=rate-limit@docker
      - traefik.http.routers.calibre-web-rtr.middlewares=secure-headers@docker
      # - traefik.http.routers.calibre-web-rtr.middlewares=authelia@docker
      # ------------------------------------------------------------------------
    image: ghcr.io/linuxserver/calibre-web:nightly

  #-----------------------------------------------------------------------------
  # MISC
  #-----------------------------------------------------------------------------

  # whoami - simple service that returns PC information from where it was accessed.
  # this is being used to keep apex domain alive
  whoami:
    container_name: whoami
    networks:
      apps: {}
    environment:
      - TZ=${TZ}
    volumes:
      - /etc/localtime:/etc/localtime:ro
    labels:
      - traefik.enable=true
      - traefik.http.routers.whoami-rtr.entrypoints=https
      - traefik.http.routers.whoami-rtr.tls=true
      - traefik.http.routers.whoami-rtr.rule=Host(`whoami.${DOMAIN_NAME}`) || (Host(`${DOMAIN_NAME}`) && PathPrefix(`/whoami`))
      - traefik.http.services.whoami-svc.loadbalancer.server.port=80
      - traefik.http.routers.whoami-rtr.service=whoami-svc
      - traefik.http.routers.whoami-rtr.middlewares=rate-limit@docker
      - traefik.http.routers.whoami-rtr.middlewares=secure-headers@docker
      # - traefik.http.routers.whoami-rtr.middlewares=authelia@docker
      # ------------------------------------------------------------------------
    image: traefik/whoami

networks:
  apps:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/24

secrets:
  acme_email:
    file: ${DOCKER_DIR}/secrets/acme_email
  calibre_user:
    file: ${DOCKER_DIR}/secrets/calibre_user
  calibre_pass:
    file: ${DOCKER_DIR}/secrets/calibre_pass
  jwt:
    file: ${DOCKER_DIR}/secrets/jwt
  session:
    file: ${DOCKER_DIR}/secrets/session
  mysql:
    file: ${DOCKER_DIR}/secrets/mysql
  mysql_root:
    file: ${DOCKER_DIR}/secrets/mysql_root
  smtp:
    file: ${DOCKER_DIR}/secrets/smtp
  duo:
    file: ${DOCKER_DIR}/secrets/duo
  plex_claim:
    file: ${DOCKER_DIR}/secrets/plex_claim
  plex_4k_claim:
    file: ${DOCKER_DIR}/secrets/plex_4k_claim
  redis:
    file: ${DOCKER_DIR}/secrets/redis
  postgress:
    file: ${DOCKER_DIR}/secrets/postgress
  ldap:
    file: ${DOCKER_DIR}/secrets/ldap
  authmariadb_root_password:
    file: ${DOCKER_DIR}/secrets/authmariadb_root_password
  maxminddb:
    file: ${DOCKER_DIR}/secrets/maxminddb
