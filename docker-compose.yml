version: '3.3'
services:
  #-----------------------------------------------------------------------------
  # MANAGEMENT
  #-----------------------------------------------------------------------------

  # traefik - reverse proxy with letsencrypt built in
  # Docs: https://doc.traefik.io/traefik/
  traefik:
    container_name: traefik
    hostname: traefik
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      apps: {}
    ports:
      - 80:80
      - 443:443
      - 8080:8080
    dns:
      - 1.1.1.1
      - 8.8.8.8
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_HOSTED_ZONE_ID=${AWS_HOSTED_ZONE_ID}
      - AWS_TTL=${AWS_TTL}
    command: # CLI arguments
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=true
      - --entryPoints.http.address=:80
      - --entryPoints.https.address=:443
        # Allow these IPs to set the X-Forwarded-* headers - Cloudflare IPs: https://www.cloudflare.com/ips/
        # If you use CloudFlare, this setup is using route53
      # - --entrypoints.https.forwardedHeaders.trustedIPs=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/12,172.64.0.0/13,131.0.72.0/22
      - --entryPoints.traefik.address=:8080
      - --api=true
      #      - --api.insecure=true
      #      - --serversTransport.insecureSkipVerify=true
      - --log=true
      - --log.level=DEBUG # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      - --accessLog=true
      - --accessLog.filePath=/config/traefik.log
      - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
      - --accessLog.filters.statusCodes=400-499
      - --providers.docker=true
      - --providers.docker.endpoint=unix:///var/run/docker.sock
      - --providers.docker.defaultrule=Host(`{{ index .Labels "com.docker.compose.service" }}.${DOMAIN_NAME}`)
      - --providers.docker.exposedByDefault=false
      - --providers.docker.network=apps
      - --providers.docker.swarmMode=false
      # Load dynamic configuration from one or more .toml or .yml files in a directory.
      - --providers.file.directory=/config/rules
      # Load dynamic configuration from a file.
      #      - --providers.file.filename=/path/to/file
      # Only works on top level files in the rules folder
      - --providers.file.watch=true
      # LetsEncrypt Staging Server - uncomment when testing
      - --certificatesResolvers.letsencrypt.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory
      - --certificatesResolvers.letsencrypt.acme.email=${ACME_EMAIL}
      - --certificatesResolvers.letsencrypt.acme.storage=/config/acme.json
      - --certificatesResolvers.letsencrypt.acme.dnsChallenge.provider=${DNS_PLUGIN}
    labels:
      - 'traefik.enable=true'
      # HTTP-to-HTTPS Redirect
      - 'traefik.http.routers.http-catchall.entrypoints=http'
      - 'traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)'
      - 'traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https'
      - 'traefik.http.routers.http-catchall.middlewares=redirect-to-https'
      # HTTP Routers
      - 'traefik.http.routers.traefik-rtr.entrypoints=https'
      - 'traefik.http.routers.traefik-rtr.rule=Host(`traefik.$DOMAIN_NAME`)'
      - 'traefik.http.routers.traefik-rtr.tls=true'
      - 'traefik.http.routers.traefik-rtr.tls.certresolver=letsencrypt'
      - 'traefik.http.routers.traefik-rtr.tls.domains[0].main=${DOMAIN_NAME}'
      - 'traefik.http.routers.traefik-rtr.tls.domains[0].sans=*.${DOMAIN_NAME}'
      ## Services - API
      - 'traefik.http.routers.traefik-rtr.service=api@internal'
      ## Middlewares
      # create a ${DOCKER_DIR}/traefik/users/.htpasswd file with user information to use basic auth
      - 'traefik.http.middlewares.basic-auth.basicauth.usersfile=/config/users'
      - 'traefik.http.middlewares.basic-auth.basicauth.realm=Traefik 2 Basic Auth'
      - 'traefik.http.middlewares.rate-limit.ratelimit.average=100'
      - 'traefik.http.middlewares.rate-limit.ratelimit.burst=50'
      - 'traefik.http.middlewares.authelia.forwardauth.address=http://authelia:9091/authelia/api/verify?rd=https://${DOMAIN_NAME}/authelia'
      - 'traefik.http.middlewares.authelia.forwardauth.trustforwardheader=true'
      - 'traefik.http.middlewares.authelia.forwardauth.authresponseheaders=Remote-User, Remote-Groups'
      - 'traefik.http.middlewares.traefik-headers.headers.accesscontrolallowmethods=GET, OPTIONS, PUT'
      - 'traefik.http.middlewares.traefik-headers.headers.accesscontrolalloworiginlist=https://${DOMAIN_NAME}'
      - 'traefik.http.middlewares.traefik-headers.headers.accesscontrolmaxage=100'
      - 'traefik.http.middlewares.traefik-headers.headers.addvaryheader=true'
      - 'traefik.http.middlewares.traefik-headers.headers.allowedhosts=traefik.${DOMAIN_NAME}'
      - 'traefik.http.middlewares.traefik-headers.headers.hostsproxyheaders=X-Forwarded-Host'
      - 'traefik.http.middlewares.traefik-headers.headers.sslredirect=true'
      - 'traefik.http.middlewares.traefik-headers.headers.sslhost=traefik.${DOMAIN_NAME}'
      - 'traefik.http.middlewares.traefik-headers.headers.sslforcehost=true'
      - 'traefik.http.middlewares.traefik-headers.headers.sslproxyheaders.X-Forwarded-Proto=https'
      - 'traefik.http.middlewares.traefik-headers.headers.stsseconds=63072000'
      - 'traefik.http.middlewares.traefik-headers.headers.stsincludesubdomains=true'
      - 'traefik.http.middlewares.traefik-headers.headers.stspreload=true'
      - 'traefik.http.middlewares.traefik-headers.headers.forcestsheader=true'
      - 'traefik.http.middlewares.traefik-headers.headers.framedeny=true'
      # This option overrides FrameDeny
      #      - "traefik.http.middlewares.traefik-headers.headers.customframeoptionsvalue=SAMEORIGIN"
      - 'traefik.http.middlewares.traefik-headers.headers.contenttypenosniff=true'
      - 'traefik.http.middlewares.traefik-headers.headers.browserxssfilter=true'
      #      - "traefik.http.middlewares.traefik-headers.headers.contentsecuritypolicy=frame-ancestors 'none'; object-src 'none'; base-uri 'none';"
      - 'traefik.http.middlewares.traefik-headers.headers.referrerpolicy=same-origin'
      - "traefik.http.middlewares.traefik-headers.headers.featurepolicy=camera 'none'; geolocation 'none'; microphone 'none'; payment 'none'; usb 'none'; vr 'none';"
      - 'traefik.http.middlewares.traefik-headers.headers.customresponseheaders.X-Robots-Tag=none,noarchive,nosnippet,notranslate,noimageindex,'
      - 'traefik.http.routers.traefik-rtr.middlewares=traefik-headers,rate-limit,authelia'
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/traefik:/config
    image: traefik/traefik:latest

  # redis - session database (more performance)
  # default run PUID is 1001 and PGID is root(0)
  # cant' seem to change it, folder permissions need to be set accordingly
  authredis:
    container_name: authredis
    hostname: authredis
    restart: unless-stopped
    networks:
      apps: {}
    environment:
      - TZ=${TZ}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - ${DOCKER_DIR}/authredis:/bitnami/redis/data
      - ${DOCKER_DIR}/authredis/redis.conf:/opt/bitnami/redis/mounted-etc/redis.conf
    secrets:
      - redis
    command: /opt/bitnami/scripts/redis/run.sh --requirepass ${REDIS_PASSWORD}
    image: bitnami/redis:latest

  # mariadb - used for authelia storage
  authmariadb:
    container_name: authmariadb
    hostname: authmariadb
    restart: unless-stopped
    networks:
      apps: {}
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK_SET=022
      - UMASK=022
      - FILE__MYSQL_ROOT_PASSWORD=/run/secrets/mysql_root
      - FILE__MYSQL_PASSWORD=/run/secrets/mysql
      - MYSQL_DATABASE=authelia
      - MYSQL_USER=authelia
    secrets:
      - mysql
      - mysql_root
    volumes:
      - ${DOCKER_DIR}/authmariadb:/config
    image: ghcr.io/linuxserver/mariadb:latest

  # Authelia - Self-Hosted Single Sign-On and Two-Factor Authentication
  authelia:
    container_name: authelia
    hostname: authelia
    restart: unless-stopped
    networks:
      apps: {}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/authelia:/config
    environment:
      - TZ=${TZ}
      - AUTHELIA_JWT_SECRET_FILE=/run/secrets/jwt
      - AUTHELIA_SESSION_SECRET_FILE=/run/secrets/session
      - AUTHELIA_STORAGE_MYSQL_PASSWORD_FILE=/run/secrets/mysql
      - AUTHELIA_NOTIFIER_SMTP_PASSWORD_FILE=/run/secrets/smtp
      - AUTHELIA_DUO_API_SECRET_KEY_FILE=/run/secrets/duo
      - AUTHELIA_SESSION_REDIS_PASSWORD_FILE=/run/secrets/redis
      - AUTHELIA_STORAGE_POSTGRES_PASSWORD_FILE=/run/secrets/postgress
      - AUTHELIA_AUTHENTICATION_BACKEND_LDAP_PASSWORD_FILE=/run/secrets/ldap
    labels:
      - 'traefik.enable=true'
      ## HTTP Routers
      - 'traefik.http.routers.authelia-rtr.entrypoints=https'
      - 'traefik.http.routers.authelia-rtr.rule=HostHeader(`${DOMAIN_NAME}`) && PathPrefix(`/authelia`)'
      ## Middlewares
      - 'traefik.http.routers.authelia-rtr.middlewares=traefik-headers,rate-limit,authelia'
      ## HTTP Services
      - 'traefik.http.services.authelia-svc.loadbalancer.server.port=9091'
      - 'traefik.http.routers.authelia-rtr.service=authelia-svc'
    secrets:
      - jwt
      - session
      - mysql
      - smtp
      - duo
      - redis
      - postgress
      - ldap
    depends_on:
      - authredis
      - authmariadb
    image: authelia/authelia:4.21.0

  # portainer - container management frontend
  # - view logs
  # - restart containers
  # - connect to container shell (if available)
  # - see configuration
  portainer:
    container_name: portainer
    hostname: portainer
    restart: unless-stopped
    networks:
      apps: {}
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - ${DOCKER_DIR}/portainer:/data
    image: portainer/portainer-ce:latest

  #-----------------------------------------------------------------------------
  # MEDIA
  #-----------------------------------------------------------------------------

  # plex - media server
  # Docs: https://hotio.dev/containers/plex/
  plex:
    container_name: plex
    hostname: plex
    restart: unless-stopped
    networks:
      apps: {}
    ports:
      - 32400:32400/tcp
    environment:
      - TZ=${TZ}
      - PLEX_UID=${PUID}
      - PLEX_GID=${PGID}
      - PUID=${PUID}
      - PGID=${PGID}
      - PLEX_CLAIM=${PLEX_CLAIM}
      - ADVERTISE_IP=${PLEX_ADVERTISE_IP}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/plex:/config
      - ${DOCKER_DIR}/plex-transcode:/transcode
      - data:/data
    image: ghcr.io/hotio/plex:autoscan

  # plex - media server
  # Docs: https://hotio.dev/containers/plex/
  plex-4k:
    container_name: plex-4k
    hostname: plex-4k
    restart: unless-stopped
    networks:
      apps: {}
    ports:
      - 32401:32400/tcp
    environment:
      - TZ=${TZ}
      - PLEX_UID=${PUID}
      - PLEX_GID=${PGID}
      - PUID=${PUID}
      - PGID=${PGID}
      - PLEX_CLAIM=${PLEX_4K_CLAIM}
      - ADVERTISE_IP=${PLEX_4K_ADVERTISE_IP}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/plex-4k:/config
      - ${DOCKER_DIR}/plex-4k-transcode:/transcode
      - data:/data
    image: ghcr.io/hotio/plex:autoscan

  # tautulli - plex monitor
  # Docs: https://hotio.dev/containers/tautulli/
  tautulli:
    container_name: tautulli
    hostname: tautulli
    restart: unless-stopped
    networks:
      apps: {}
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
      - UMASK=022
    links:
      - plex
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/tautulli:/config
    image: ghcr.io/hotio/tautulli:latest

  # tautulli - plex monitor
  # Docs: https://hotio.dev/containers/tautulli/
  tautulli-4k:
    container_name: tautulli-4k
    hostname: tautulli-4k
    restart: unless-stopped
    networks:
      apps: {}
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
      - UMASK=022
    links:
      - plex-4k
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/tautulli-4k:/config
    image: ghcr.io/hotio/tautulli:latest

  # kitana - plex plugin middleware (frontend)
  # Docs: https://github.com/pannal/Kitana
  kitana:
    container_name: kitana
    hostname: kitana
    restart: unless-stopped
    networks:
      apps: {}
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
    command: -B 0.0.0.0:31337 -p /kitana -P
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/kitana:/app/data
    image: pannal/kitana:latest

  # sabnzbd - usenet downloader written in python (easynews)
  # Docs: https://hotio.dev/containers/sabnzbd/
  sabnzbd:
    container_name: sabnzbd
    hostname: sabnzbd
    restart: unless-stopped
    networks:
      apps: {}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/sabnzbd:/config
      - downloads:/data/downloads
    image: ghcr.io/hotio/sabnzbd:latest

  # nzbget - usenet downloader written in C++ (easynews)
  # Docs: https://hotio.dev/containers/nzbget/
  nzbget:
    container_name: nzbget
    hostname: nzbget
    restart: unless-stopped
    networks:
      apps: {}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/nzbget:/config
      - downloads:/data/downloads
    image: ghcr.io/hotio/nzbget:latest

  # qbittorrent - torrent download client with VPN built in
  # Docs: https://github.com/binhex/arch-qbittorrentvpn
  # Read the documentaton on proper setup of either wireguard or openvpn
  # This template is setup for wireguard
  qbittorrent:
    container_name: qbittorrent
    hostname: qbittorrent
    restart: unless-stopped
    privileged: true
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
    networks:
      apps: {}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
      # change below subnet to whatever you configure your docker network to
      - LAN_NETWORK=172.20.0.0/16
      - WEBUI_PORT=8080
      - VPN_ENABLED=yes
      - VPN_PROV=${VPN_PROV}
      # options below are openvpn or wireguard (I like wireguard)
      - VPN_CLIENT=wireguard
      - STRICT_PORT_FORWARD=yes
      - ENABLE_PRIVOXY=no
      - DEBUG=no
      - NAME_SERVERS=209.222.18.222,84.200.69.80,37.235.1.174,1.1.1.1,209.222.18.218,37.235.1.177
      - VPN_USER=${PIA_USERNAME}
      - VPN_PASS=${PIA_PASSWORD}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/qbittorrent:/config
      - downloads:/data/downloads
    image: binhex/arch-qbittorrentvpn:latest

  # deluge - torrent download client with VPN built in
  # Docs: https://github.com/binhex/arch-delugevpn
  # Read the documentaton on proper setup of either wireguard or openvpn
  # This template is setup for wireguard
  deluge:
    container_name: deluge
    hostname: deluge
    restart: unless-stopped
    privileged: true
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
    networks:
      apps: {}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
      # change below subnet to whatever you configure your docker network to
      - LAN_NETWORK=172.20.0.0/16
      - VPN_ENABLED=yes
      - VPN_PROV=${VPN_PROV}
      # options below are openvpn or wireguard (I like wireguard)
      - VPN_CLIENT=wireguard
      - STRICT_PORT_FORWARD=yes
      - ENABLE_PRIVOXY=no
      - DEBUG=no
      - NAME_SERVERS=209.222.18.222,84.200.69.80,37.235.1.174,1.1.1.1,209.222.18.218,37.235.1.177
      - VPN_USER=${PIA_USERNAME}
      - VPN_PASS=${PIA_PASSWORD}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/deluge:/config
      - downloads:/data/downloads
    image: binhex/arch-delugevpn:latest

  # jackett - nzb torsnab proxy
  # used to aggregate torrent indexers to use with nzbhydra, sonarr and others
  # Docs: https://hotio.dev/containers/jackett/
  jackett:
    container_name: jackett
    hostname: jackett
    restart: unless-stopped
    networks:
      apps: {}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - ${DOCKER_DIR}/jackett:/config
      - downloads:/data/downloads
    image: ghcr.io/hotio/jackett:latest

  # nzbhydra2 - usenet and torsnab indexer proxy
  # Docs: https://hotio.dev/containers/nzbhydra2/
  nzbhydra2:
    container_name: nzbhydra2
    hostname: nzbhydra2
    restart: unless-stopped
    networks:
      apps: {}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/nzbhydra2:/config
      - downloads:/data/downloads
    image: ghcr.io/hotio/nzbhydra2:testing

  # bazarr - automatic download subtitles
  # Docs: https://hotio.dev/containers/bazarr/
  bazarr:
    container_name: bazarr
    hostname: bazarr
    restart: unless-stopped
    networks:
      apps: {}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
    links:
      - plex
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/bazarr:/config
      - data:/data
    image: ghcr.io/hotio/bazarr:nightly

  # bazarr - automatic download subtitles
  # Docs: https://hotio.dev/containers/bazarr/
  bazarr-4k:
    container_name: bazarr-4k
    hostname: bazarr-4k
    restart: unless-stopped
    networks:
      apps: {}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
    links:
      - plex-4k
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/bazarr-4k:/config
      - data:/data
    image: ghcr.io/hotio/bazarr:nightly

  # sonarr - TV Shows
  # Docs: https://hotio.dev/containers/sonarr/
  sonarr:
    container_name: sonarr
    hostname: sonarr
    restart: unless-stopped
    networks:
      apps: {}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
    depends_on:
      - nzbhydra2
      - sabnzbd
      - nzbget
      - deluge
      - qbittorrent
    volumes:
      - ${DOCKER_DIR}/sonarr:/config
      - data:/data
      - downloads:/data/downloads
    image: ghcr.io/hotio/sonarr:nightly

  # sonarr - TV Shows
  # Docs: https://hotio.dev/containers/sonarr/
  sonarr-4k:
    container_name: sonarr-4k
    hostname: sonarr-4k
    restart: unless-stopped
    networks:
      apps: {}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
    depends_on:
      - nzbhydra2
      - sabnzbd
      - nzbget
      - deluge
      - qbittorrent
    volumes:
      - ${DOCKER_DIR}/sonarr-4k:/config
      - downloads:/data/downloads
      - data:/data
    image: ghcr.io/hotio/sonarr:nightly

  # radarr - Movies
  # Docs: https://hotio.dev/containers/radarr/
  radarr:
    container_name: radarr
    hostname: radarr
    restart: unless-stopped
    networks:
      apps: {}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
    depends_on:
      - nzbhydra2
      - sabnzbd
      - nzbget
      - deluge
      - qbittorrent
    volumes:
      - ${DOCKER_DIR}/radarr:/config
      - data:/data
      - downloads:/data/downloads
    image: ghcr.io/hotio/radarr:nightly

  # radarr - Movies
  # Docs: https://hotio.dev/containers/radarr/
  radarr-4k:
    container_name: radarr-4k
    hostname: radarr-4k
    restart: unless-stopped
    networks:
      apps: {}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
    depends_on:
      - nzbhydra2
      - sabnzbd
      - nzbget
      - deluge
      - qbittorrent
    volumes:
      - ${DOCKER_DIR}/radarr-4k:/config
      - data:/data
      - downloads:/data/downloads
    image: ghcr.io/hotio/radarr:nightly

  # lidarr - Music
  # Docs: https://hotio.dev/containers/lidarr/
  lidarr:
    container_name: lidarr
    hostname: lidarr
    restart: unless-stopped
    networks:
      apps: {}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
    depends_on:
      - sabnzbd
      - nzbget
      - deluge
      - qbittorrent
    volumes:
      - ${DOCKER_DIR}/lidarr:/config
      - data:/data
      - downloads:/data/downloads
    image: ghcr.io/hotio/lidarr:nightly

  # readarr - eBooks
  # Docs: https://hotio.dev/containers/readarr/
  readarr:
    container_name: readarr
    hostname: readarr
    restart: unless-stopped
    networks:
      apps: {}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
    depends_on:
      - nzbhydra2
      - sabnzbd
      - nzbget
      - deluge
      - qbittorrent
      - calibre
    volumes:
      - ${DOCKER_DIR}/readarr:/config
      - data:/data
      - downloads:/data/downloads
    image: ghcr.io/hotio/readarr:nightly

  # mylar3 - Comics
  # Docs: https://hotio.dev/containers/mylar3/
  mylar3:
    container_name: mylar3
    hostname: mylar3
    restart: unless-stopped
    networks:
      apps: {}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
    depends_on:
      - nzbhydra2
      - sabnzbd
      - nzbget
    volumes:
      - ${DOCKER_DIR}/mylar3:/config
      - data:/data
      - downloads:/data/downloads
    image: ghcr.io/hotio/mylar3:nightly

  # lazylib - eBooks and Audiobooks
  # Docs: https://hub.docker.com/r/linuxserver/lazylibrarian
  lazylib:
    container_name: lazylib
    hostname: lazylib
    restart: unless-stopped
    networks:
      apps: {}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
      - DEBUG=no
      - DOCKER_MODS=ghcr.io/linuxserver/calibre-web:calibre|ghcr.io/linuxserver/mods:lazylibrarian-ffmpeg
    depends_on:
      - nzbhydra2
      - sabnzbd
      - nzbget
      - deluge
      - qbittorrent
    volumes:
      - ${DOCKER_DIR}/lazylib:/config
      - data:/data
      - downloads:/data/downloads
    image: ghcr.io/linuxserver/lazylibrarian:latest

  # ombi - sonarr, radarr, lidarr middleware (request tv, movies, music)
  # Docs: https://hotio.dev/containers/ombi/
  ombi:
    container_name: ombi
    hostname: ombi
    restart: unless-stopped
    networks:
      apps: {}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - ${DOCKER_DIR}/ombi:/config
    image: ghcr.io/hotio/ombi:latest

  # calibre - ebook management database
  # docs: https://hub.docker.com/r/linuxserver/calibre
  calibre:
    container_name: calibre
    hostname: calibre
    restart: unless-stopped
    networks:
      apps: {}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
      - GUAC_USER=${GUAC_USER}
      - GUAC_PASS=${GUAC_PASS}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/calibre:/config
      - data:/data
    image: ghcr.io/linuxserver/calibre:latest

  # calibre-web - web frontend for calibre
  # docs: https://hub.docker.com/r/linuxserver/calibre-web
  calibre-web:
    container_name: calibre-web
    hostname: calibre-web
    restart: unless-stopped
    networks:
      apps: {}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
      - DOCKER_MODS=ghcr.io/linuxserver/calibre-web:calibre
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/calibre-web:/config
      - data:/data
    image: ghcr.io/linuxserver/calibre-web:latest

  # organizr - WebApp portal for bookmarks, prevents multiple tabs
  # mostly used for sonarr and the like
  # docs: https://hub.docker.com/r/organizr/organizr
  organizr:
    container_name: organizr
    hostname: organizr
    restart: unless-stopped
    networks:
      apps: {}
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - fpm=true
      - branch=v2-develop
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/organizr:/config
    image: ghcr.io/organizr/organizr:latest

  # trackarr - Tracker announcements to Sonarr/Radarr/Lidarr.
  # Docs: https://hotio.dev/containers/trackarr/
  trackarr:
    container_name: trackarr
    hostname: trackarr
    restart: unless-stopped
    networks:
      apps: {}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
      - DEBUG=no
    depends_on:
      - sonarr
      - sonarr-4k
      - radarr
      - radarr-4k
      - lidarr
    volumes:
      - ${DOCKER_DIR}/trackarr:/config
    image: ghcr.io/hotio/trackarr:nightly

  # requestrr a chatbot used to simplify using services like Sonarr/Radarr/Ombi via the use of chat!
  # Docs: https://hotio.dev/containers/requestrr/
  requestrr:
    container_name: requestrr
    hostname: requestrr
    restart: unless-stopped
    networks:
      apps: {}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
      - DEBUG=no
    volumes:
      - ${DOCKER_DIR}/requestrr:/config
    image: ghcr.io/hotio/requestrr:latest

  # requestrr a chatbot used to simplify using services like Sonarr/Radarr/Ombi via the use of chat!
  # Docs: https://hotio.dev/containers/requestrr/
  requestrr-4k:
    container_name: requestrr-4k
    hostname: requestrr-4k
    restart: unless-stopped
    networks:
      apps: {}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
      - DEBUG=no
    volumes:
      - ${DOCKER_DIR}/requestrr-4k:/config
    image: ghcr.io/hotio/requestrr:latest

  # unpackerr - This application runs as a daemon on your download host. It checks for completed
  # downloads and extracts them so Radarr and/or Sonarr and/or Lidarr may import them.
  # Docs: https://hotio.dev/containers/requestrr/
  unpackerr:
    container_name: unpackerr
    hostname: unpackerr
    restart: unless-stopped
    networks:
      apps: {}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
      - DEBUG=no
    depends_on:
      - sonarr
      - sonarr-4k
      - radarr
      - radarr-4k
      - lidarr
      - readarr
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/unpackerr:/config
      - data:/data
      - downloads:/data/downloads
    image: ghcr.io/hotio/unpackerr:nightly

  # whoami - simple service that returns PC information from where it was accessed.
  # this is being used to keep apex domain alive
  whoami:
    container_name: whoami
    hostname: whoami
    networks:
      apps: {}
    environment:
      - TZ=${TZ}
    volumes:
      - /etc/localtime:/etc/localtime:ro
    image: traefik/whoami

networks:
  apps:
    driver: bridge
    ipam:
      config:
        - subnet: 172.22.0.0/24

volumes:
  # LOCAL Mounts
  downloads:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ${LOCAL_DL_DIR}

  data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ${DATA_DIR}

secrets:
  acme_email:
    file: ${SECRETS_DIR}/acme_email
  calibre_user:
    file: ${SECRETS_DIR}/calibre_user
  calibre_pass:
    file: ${SECRETS_DIR}/calibre_pass
  jwt:
    file: ${SECRETS_DIR}/jwt
  session:
    file: ${SECRETS_DIR}/session
  mysql:
    file: ${SECRETS_DIR}/mysql
  mysql_root:
    file: ${SECRETS_DIR}/mysql_root
  smtp:
    file: ${SECRETS_DIR}/smtp
  duo:
    file: ${SECRETS_DIR}/duo
  plex_claim:
    file: ${SECRETS_DIR}/plex_claim
  plex_4k_claim:
    file: ${SECRETS_DIR}/plex_4k_claim
  redis:
    file: ${SECRETS_DIR}/redis
  postgress:
    file: ${SECRETS_DIR}/postgress
  ldap:
    file: ${SECRETS_DIR}/ldap
  authmariadb_root_password:
    file: ${SECRETS_DIR}/authmariadb_root_password
  maxminddb:
    file: ${SECRETS_DIR}/maxminddb
