services:
  #-----------------------------------------------------------------------------
  # MANAGEMENT
  #-----------------------------------------------------------------------------

  # traefik - reverse proxy with letsencrypt built in
  # Docs: https://doc.traefik.io/traefik/
  traefik:
    container_name: traefik
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      apps: {}
    ports:
      - 80:80
      - 443:443
    dns:
      - 1.1.1.1
      - 1.0.0.1
    logging:
      driver: json-file
      options:
        max-file: ${DOCKERLOGGING_MAXFILE}
        max-size: ${DOCKERLOGGING_MAXSIZE}
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
      # ------------------------------------------------------------------------
      - CLOUDFLARE_API_KEY=${CLOUDFLARE_API_KEY}
      - CLOUDFLARE_EMAIL=${CLOUDFLARE_EMAIL}
      # ------------------------------------------------------------------------
    command: # CLI arguments
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=true
      - --entryPoints.http.address=:80
      - --entryPoints.https.address=:443
      # ------------------------------------------------------------------------
      # Allow these IPs to set the X-Forwarded-* headers - Cloudflare IPs: https://www.cloudflare.com/ips/
      - --entrypoints.https.forwardedHeaders.trustedIPs=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/13,104.24.0.0/14,172.64.0.0/13,131.0.72.0/22
      # ------------------------------------------------------------------------
      - --entryPoints.traefik.address=:8080
      - --api=true
      - --serversTransport.insecureSkipVerify=true
      - --log=true
      # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      - --log.level=INFO
      - --accessLog=true
      - --accessLog.filePath=/config/traefik.log
      - --accessLog.bufferingSize=100
      - --accessLog.filters.statusCodes=400-499
      - --providers.docker=true
      - --providers.docker.endpoint=unix:///var/run/docker.sock
      - --providers.docker.defaultrule=Host(`{{ index .Labels "com.docker.compose.service" }}.${DOMAIN_NAME}`)
      - --providers.docker.exposedByDefault=false
      - --providers.docker.network=media-apps_apps
      - --providers.docker.swarmMode=false
      - --providers.file.watch=true
      - --providers.file.directory=/config/rules
      # ------------------------------------------------------------------------
      # LetsEncrypt Staging Server - uncomment when testing
      # - --certificatesResolvers.letsencrypt.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory
      # ------------------------------------------------------------------------
      - --certificatesResolvers.letsencrypt.acme.email=${ACME_EMAIL}
      - --certificatesResolvers.letsencrypt.acme.storage=/config/acme.json
      - --certificatesResolvers.letsencrypt.acme.dnsChallenge.provider=${DNS_PROVIDER}
      - --certificatesresolvers.letsencrypt.acme.dnschallenge.delaybeforecheck=0
      # ------------------------------------------------------------------------
      # must use manual resolvers when using docker-compose otherwise validation fails
      - --certificatesResolvers.letsencrypt.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53
      # ------------------------------------------------------------------------
    labels:
      - traefik.enable=true
      - traefik.http.routers.http-catchall.entrypoints=https
      - traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)
      - traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https
      - traefik.http.routers.http-catchall.middlewares=redirect-to-https
      - traefik.http.routers.traefik-rtr.tls=true
      - traefik.http.routers.traefik-rtr.entrypoints=https
      - traefik.http.routers.traefik-rtr.tls.certresolver=letsencrypt
      - traefik.http.routers.traefik-rtr.rule=Host(`traefik.${DOMAIN_NAME}`)
      - traefik.http.routers.traefik-rtr.tls.domains[0].main=${DOMAIN_NAME}
      - traefik.http.routers.traefik-rtr.tls.domains[0].sans=*.${DOMAIN_NAME}
      - traefik.http.routers.traefik-rtr.service=api@internal
      - traefik.http.routers.traefik-rtr.middlewares=rate-limit@docker
      - traefik.http.routers.traefik-rtr.middlewares=secure-headers@docker
      # ------------------------------------------------------------------------
      - traefik.http.middlewares.rate-limit.rateLimit.average=100
      - traefik.http.middlewares.rate-limit.rateLimit.burst=50
      # ------------------------------------------------------------------------
      - traefik.http.middlewares.secure-headers.headers.frameDeny=true
      - traefik.http.middlewares.secure-headers.headers.stsIncludeSubdomains=true
      - traefik.http.middlewares.secure-headers.headers.stsPreload=true
      - traefik.http.middlewares.secure-headers.headers.stsSeconds=63072000
      - traefik.http.middlewares.secure-headers.headers.contentTypeNosniff=true
      - traefik.http.middlewares.secure-headers.headers.accessControlAllowMethods=GET, POST
      - traefik.http.middlewares.secure-headers.headers.accessControlAllowOriginList=https://${DOMAIN_NAME}, https://www.${DOMAIN_NAME}
      - traefik.http.middlewares.secure-headers.headers.accessControlMaxAge=100
      - traefik.http.middlewares.secure-headers.headers.addVaryheader=true
      - traefik.http.middlewares.secure-headers.headers.contentSecurityPolicy=script-src 'self'
      - traefik.http.middlewares.secure-headers.headers.referrerPolicy=origin-when-cross-origin
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - ${DOCKER_DIR}/traefik:/config
    image: traefik:latest

  # organizr - WebApp portal for bookmarks, prevents multiple tabs
  # mostly used for sonarr and the like
  # docs: https://hub.docker.com/r/organizr/organizr
  organizr:
    container_name: organizr
    restart: unless-stopped
    networks:
      apps: {}
    logging:
      driver: json-file
      options:
        max-file: ${DOCKERLOGGING_MAXFILE}
        max-size: ${DOCKERLOGGING_MAXSIZE}
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - fpm=true
      - branch=v2-develop
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/organizr:/config
    labels:
      - traefik.enable=true
      - traefik.http.routers.organizr-rtr.entrypoints=https
      - traefik.http.routers.organizr-rtr.tls=true
      - traefik.http.routers.organizr-rtr.rule=Host(`organizr.${DOMAIN_NAME}`) || (Host(`${DOMAIN_NAME}`) && PathPrefix(`/organizr`))
      - traefik.http.services.organizr-svc.loadbalancer.server.port=80
      - traefik.http.routers.organizr-rtr.service=organizr-svc
      - traefik.http.routers.organizr-rtr.middlewares=rate-limit@docker
      - traefik.http.routers.organizr-rtr.middlewares=secure-headers@docker
      # - traefik.http.routers.organizr-rtr.middlewares=authelia@docker
      # ------------------------------------------------------------------------
    image: ghcr.io/organizr/organizr:latest

  #-----------------------------------------------------------------------------
  # DOWNLOADS
  #-----------------------------------------------------------------------------

  # qbittorrent - torrent download client with VPN built in
  # Docker Image Docs: https://hotio.dev/containers/qflood/
  # Read the documentaton on proper setup of either wireguard
  # This template is setup for wireguard
  qb:
    container_name: qb
    restart: unless-stopped
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
      - net.ipv6.conf.all.disable_ipv6=1
    networks:
      apps: {}
    logging:
      driver: json-file
      options:
        max-file: ${DOCKERLOGGING_MAXFILE}
        max-size: ${DOCKERLOGGING_MAXSIZE}
    healthcheck:
      test: curl --fail http://localhost:8081 || exit 1
      interval: 10s
      retries: 5
      start_period: 20s
      timeout: 10s
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
      - VPN_ENABLED=true
      - VPN_LAN_NETWORK=172.20.0.0/20
      - WEBUI_PORTS=8081/tcp
      - VPN_CONF=wg0
    labels:
      - traefik.enable=true
      - traefik.http.services.qb-svc.loadbalancer.server.port=8081
      - traefik.http.services.qb-svc.loadbalancer.passhostheader=false
      - traefik.http.routers.qb-rtr.entrypoints=https
      - traefik.http.routers.qb-rtr.tls=true
      - traefik.http.routers.qb-rtr.rule=Host(`qb.${DOMAIN_NAME}`) || Host(`${DOMAIN_NAME}`) && PathPrefix(`/qb`)
      - traefik.http.middlewares.qb-redirect.redirectregex.regex=^(.*)/qb$$
      - traefik.http.middlewares.qb-redirect.redirectregex.replacement=$$1/qb/
      - traefik.http.middlewares.qb-strip.stripprefix.prefixes=/qb/
      - traefik.http.middlewares.qb-headers.headers.customrequestheaders.X-Frame-Options=
      - traefik.http.middlewares.qb-headers.headers.customrequestheaders.Referer=
      - traefik.http.middlewares.qb-headers.headers.customrequestheaders.Origin=
      - traefik.http.routers.qb-rtr.middlewares=qb-strip,qb-redirect,qb-headers
      - traefik.http.routers.qb-rtr.service=qb-svc
      - traefik.http.routers.qb-rtr.middlewares=rate-limit@docker
      - traefik.http.routers.qb-rtr.middlewares=secure-headers@docker
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/qbittorrent:/config
      - ${DATA_DIR}/downloads/torrents:/data/downloads/torrents
    devices:
      - /dev/net/tun
    image: cr.hotio.dev/hotio/qbittorrent

  # sabnzbd - usenet downloader written in python (easynews)
  # Docs: https://hotio.dev/containers/sabnzbd/
  sabnzbd:
    container_name: sabnzbd
    restart: unless-stopped
    networks:
      apps: {}
    logging:
      driver: json-file
      options:
        max-file: ${DOCKERLOGGING_MAXFILE}
        max-size: ${DOCKERLOGGING_MAXSIZE}
    healthcheck:
      test: curl --fail http://localhost:8080/sabnzbd || exit 1
      interval: 10s
      retries: 5
      start_period: 20s
      timeout: 10s
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/sabnzbd:/config
      - ${DATA_DIR}/downloads/usenet:/data/downloads/usenet
    labels:
      - traefik.enable=true
      - traefik.http.routers.sabnzbd-rtr.entrypoints=https
      - traefik.http.routers.sabnzbd-rtr.tls=true
      - traefik.http.routers.sabnzbd-rtr.rule=Host(`sabnzbd.${DOMAIN_NAME}`) || (Host(`${DOMAIN_NAME}`) && PathPrefix(`/sabnzbd`))
      - traefik.http.services.sabnzbd-svc.loadbalancer.server.port=8080
      - traefik.http.routers.sabnzbd-rtr.service=sabnzbd-svc
      - traefik.http.routers.sabnzbd-rtr.middlewares=rate-limit@docker
      - traefik.http.routers.sabnzbd-rtr.middlewares=secure-headers@docker
      # - traefik.http.routers.sabnzbd-rtr.middlewares=authelia@docker
      # ------------------------------------------------------------------------
    # image: lscr.io/linuxserver/sabnzbd:latest
    image: cr.hotio.dev/hotio/sabnzbd:testing

  # prowlarr - usenet and torsnab indexer proxy
  # Docker Image Docs: hhttps://hotio.dev/containers/prowlarr/
  # DOCS: https://wiki.servarr.com/prowlarr
  prowlarr:
    container_name: prowlarr
    restart: unless-stopped
    networks:
      apps: {}
    logging:
      driver: json-file
      options:
        max-file: ${DOCKERLOGGING_MAXFILE}
        max-size: ${DOCKERLOGGING_MAXSIZE}
    depends_on:
      sabnzbd:
        condition: service_healthy
      qb:
        condition: service_healthy
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
      - DOCKER_MODS=ghcr.io/gilbn/theme.park:prowlarr
      - TP_THEME=${TP_THEME}
    labels:
      - traefik.enable=true
      - traefik.http.routers.prowlarr-rtr.entrypoints=https
      - traefik.http.routers.prowlarr-rtr.tls=true
      - traefik.http.routers.prowlarr-rtr.rule=Host(`prowlarr.${DOMAIN_NAME}`) || (Host(`${DOMAIN_NAME}`) && PathPrefix(`/prowlarr`))
      - traefik.http.services.prowlarr-svc.loadbalancer.server.port=9696
      - traefik.http.routers.prowlarr-rtr.service=prowlarr-svc
      - traefik.http.routers.prowlarr-rtr.middlewares=rate-limit@docker
      - traefik.http.routers.prowlarr-rtr.middlewares=secure-headers@docker
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/prowlarr:/config
    # image: lscr.io/linuxserver/prowlarr:nightly
    image: cr.hotio.dev/hotio/prowlarr:nightly

  # DOCS: https://autobrr.com/getting-started/docker
  autobrr:
    container_name: autobrr
    restart: unless-stopped
    networks:
      apps: {}
    logging:
      driver: json-file
      options:
        max-file: ${DOCKERLOGGING_MAXFILE}
        max-size: ${DOCKERLOGGING_MAXSIZE}
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${DOCKER_DIR}/autobrr:/config
    labels:
      - traefik.enable=true
      - traefik.http.routers.autobrr-rtr.entrypoints=https
      - traefik.http.routers.autobrr-rtr.tls=true
      - traefik.http.routers.autobrr-rtr.rule=Host(`autobrr.${DOMAIN_NAME}`) || (Host(`${DOMAIN_NAME}`) && PathPrefix(`/autobrr`))
      - traefik.http.services.autobrr-svc.loadbalancer.server.port=7474
      - traefik.http.routers.autobrr-rtr.service=autobrr-svc
      - traefik.http.routers.autobrr-rtr.middlewares=rate-limit@docker
      - traefik.http.routers.autobrr-rtr.middlewares=secure-headers@docker
      # - traefik.http.routers.autobrr-rtr.middlewares=authelia@docker
      # ------------------------------------------------------------------------
    image: ghcr.io/autobrr/autobrr

  # unpackerr - This application runs as a daemon on your download host. It checks for completed
  # Downloads and extracts them so Radarr and/or Sonarr and/or Lidarr may import them.
  # Docker Image Docs: https://hotio.dev/containers/unpackerr/
  unpackerr:
    container_name: unpackerr
    restart: unless-stopped
    networks:
      apps: {}
    logging:
      driver: json-file
      options:
        max-file: ${DOCKERLOGGING_MAXFILE}
        max-size: ${DOCKERLOGGING_MAXSIZE}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
      - DEBUG=no
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/unpackerr:/config
      - ${DATA_DIR}/downloads:/data/downloads
    image: cr.hotio.dev/hotio/unpackerr:testing

  #-----------------------------------------------------------------------------
  # MEDIA
  #-----------------------------------------------------------------------------

  # overseerr a chatbot used to simplify using services like Sonarr/Radarr/Ombi via the use of chat!
  # Docs: https://hotio.dev/containers/overseerr/
  overseerr:
    container_name: overseerr
    restart: unless-stopped
    networks:
      apps: {}
    logging:
      driver: json-file
      options:
        max-file: ${DOCKERLOGGING_MAXFILE}
        max-size: ${DOCKERLOGGING_MAXSIZE}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/overseerr:/config
    labels:
      - traefik.enable=true
      - traefik.http.routers.overseerr-rtr.entrypoints=https
      - traefik.http.routers.overseerr-rtr.tls=true
      - traefik.http.routers.overseerr-rtr.rule=Host(`overseerr.${DOMAIN_NAME}`) || (Host(`${DOMAIN_NAME}`) && PathPrefix(`/overseerr`))
      - traefik.http.services.overseerr-svc.loadbalancer.server.port=5055
      - traefik.http.routers.overseerr-rtr.service=overseerr-svc
      - traefik.http.routers.overseerr-rtr.middlewares=rate-limit@docker
      - traefik.http.routers.overseerr-rtr.middlewares=secure-headers@docker
    # image: lscr.io/linuxserver/overseerr:develop
    image: cr.hotio.dev/hotio/overseerr:nightly

  # petio a chatbot used to simplify using services like Sonarr/Radarr via the use of chat!
  # Docs: https://hotio.dev/containers/petio/
  petio:
    container_name: petio
    restart: unless-stopped
    networks:
      apps: {}
    logging:
      driver: json-file
      options:
        max-file: ${DOCKERLOGGING_MAXFILE}
        max-size: ${DOCKERLOGGING_MAXSIZE}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/petio:/config
    labels:
      - traefik.enable=true
      - traefik.http.routers.petio-rtr.entrypoints=https
      - traefik.http.routers.petio-rtr.tls=true
      - traefik.http.routers.petio-rtr.rule=Host(`petio.${DOMAIN_NAME}`) || (Host(`${DOMAIN_NAME}`) && PathPrefix(`/petio`))
      - traefik.http.services.petio-svc.loadbalancer.server.port=7777
      - traefik.http.routers.petio-rtr.service=petio-svc
      - traefik.http.routers.petio-rtr.middlewares=rate-limit@docker
      - traefik.http.routers.petio-rtr.middlewares=secure-headers@docker
    # image: lscr.io/linuxserver/petio:develop
    image: cr.hotio.dev/hotio/petio:nightly

  mongo:
    container_name: mongo
    user: ${PUID}:${PGID}
    networks:
      apps: {}
    logging:
      driver: json-file
      options:
        max-file: ${DOCKERLOGGING_MAXFILE}
        max-size: ${DOCKERLOGGING_MAXSIZE}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/mongo:/data/db
    image: mongo

  # plex - media server
  # Docker Image Docs: https://hotio.dev/containers/plex/
  plex:
    container_name: plex
    restart: unless-stopped
    networks:
      apps: {}
    ports:
      - 32400:32400/tcp
    logging:
      driver: json-file
      options:
        max-file: ${DOCKERLOGGING_MAXFILE}
        max-size: ${DOCKERLOGGING_MAXSIZE}
    environment:
      - TZ=${TZ}
      - PLEX_UID=${PUID}
      - PLEX_GID=${PGID}
      - PUID=${PUID}
      - PGID=${PGID}
      - DEBUG=no
      - PLEX_CLAIM=${PLEX_CLAIM}
      - PLEX_PASS=yes
      - ADVERTISE_IP=${PLEX_ADVERTISE_IP}
      #-------------------------------------------------------------------------
      # If you have an nvidia GPU
      #-------------------------------------------------------------------------
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,video,utility
      #-------------------------------------------------------------------------
    labels:
      - traefik.enable=true
      - traefik.http.routers.plex-rtr.entrypoints=https
      - traefik.http.routers.plex-rtr.tls=true
      - traefik.http.routers.plex-rtr.rule=Host(`plex.${DOMAIN_NAME}`) || (Host(`${DOMAIN_NAME}`) && PathPrefix(`/plex`))
      - traefik.http.services.plex-svc.loadbalancer.server.port=32400
      - traefik.http.routers.plex-rtr.service=plex-svc
      - traefik.http.routers.plex-rtr.middlewares=rate-limit@docker
      - traefik.http.routers.plex-rtr.middlewares=secure-headers@docker
      # - traefik.http.routers.plex-rtr.middlewares=authelia@docker
      #-----------------------------------------------------------------------------
      - traefik.http.services.webtools-svc.loadbalancer.server.port=33443
      - traefik.http.services.webtools-svc.loadbalancer.server.scheme=https
      - traefik.http.routers.webtools-rtr.entrypoints=https
      - traefik.http.routers.webtools-rtr.tls=true
      - traefik.http.routers.webtools-rtr.rule=Host(`webtools.${DOMAIN_NAME}`)
      - traefik.http.routers.webtools-rtr.service=webtools-svc
      - traefik.http.routers.webtools-rtr.middlewares=rate-limit@docker
      - traefik.http.routers.webtools-rtr.middlewares=secure-headers@docker
      #-----------------------------------------------------------------------------
      - traefik.http.services.notifiarr-svc.loadbalancer.server.port=5454
      - traefik.http.routers.notifiarr-rtr.entrypoints=https
      - traefik.http.routers.notifiarr-rtr.tls=true
      - traefik.http.routers.notifiarr-rtr.rule=Host(`notifiarr.${DOMAIN_NAME}`) || Host(`${DOMAIN_NAME}`) && PathPrefix(`/notifiarr`)
      - traefik.http.routers.notifiarr-rtr.service=notifiarr-svc
      - traefik.http.routers.notifiarr-rtr.middlewares=rate-limit@docker
      - traefik.http.routers.notifiarr-rtr.middlewares=secure-headers@docker
      #-----------------------------------------------------------------------------
      - traefik.http.services.tautulli-svc.loadbalancer.server.port=8181
      - traefik.http.routers.tautulli-rtr.entrypoints=https
      - traefik.http.routers.tautulli-rtr.tls=true
      - traefik.http.routers.tautulli-rtr.rule=Host(`tautulli.${DOMAIN_NAME}`) || Host(`${DOMAIN_NAME}`) && PathPrefix(`/tautulli`)
      - traefik.http.routers.tautulli-rtr.service=tautulli-svc
      - traefik.http.routers.tautulli-rtr.middlewares=rate-limit@docker
      - traefik.http.routers.tautulli-rtr.middlewares=secure-headers@docker
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/plex:/config
      - ${DOCKER_DIR}/plex-transcode:/transcode
      - ${DATA_DIR}/media:/data
    image: cr.hotio.dev/hotio/plex:release

  notifiarr:
    container_name: notifiarr
    restart: unless-stopped
    network_mode: service:plex
    logging:
      driver: json-file
      options:
        max-file: ${DOCKERLOGGING_MAXFILE}
        max-size: ${DOCKERLOGGING_MAXSIZE}
    volumes:
      - ${DOCKER_DIR}/notifiarr:/config
      - /var/run/utmp:/var/run/utmp
    image: golift/notifiarr

  # tautulli - plex monitor
  # Docker Image Docs: https://hotio.dev/containers/tautulli/
  tautulli:
    container_name: tautulli
    restart: unless-stopped
    network_mode: service:plex
    logging:
      driver: json-file
      options:
        max-file: ${DOCKERLOGGING_MAXFILE}
        max-size: ${DOCKERLOGGING_MAXSIZE}
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
      - UMASK=022
      - DOCKER_MODS=ghcr.io/gilbn/theme.park:tautulli
      - TP_THEME=${TP_THEME}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/tautulli:/config
    # image: lscr.io/linuxserver/tautulli:develop
    image: cr.hotio.dev/hotio/tautulli:testing

  plextraktsync:
    container_name: plextraktsync
    image: ghcr.io/taxel/plextraktsync
    networks:
      apps: {}
    volumes:
      - ${DOCKER_DIR}/plextraktsync:/app/config

  scheduler:
    image: mcuadros/ofelia:latest
    container_name: scheduler
    depends_on:
      - plextraktsync
    command: daemon --docker
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    labels:
      - ofelia.job-run.plextraktsync.schedule="@every 6h"
      - ofelia.job-run.plextraktsync.container="plextraktsync"

  # bazarr - automatic download subtitles
  # Docker Image Docs: https://hotio.dev/containers/bazarr/
  # DOCS: https://wiki.bazarr.media/Getting-Started/Setup-Guide/
  bazarr:
    container_name: bazarr
    restart: unless-stopped
    networks:
      apps: {}
    logging:
      driver: json-file
      options:
        max-file: ${DOCKERLOGGING_MAXFILE}
        max-size: ${DOCKERLOGGING_MAXSIZE}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
      - DOCKER_MODS=ghcr.io/gilbn/theme.park:bazarr
      - TP_THEME=${TP_THEME}
    labels:
      - traefik.enable=true
      - traefik.http.routers.bazarr-rtr.entrypoints=https
      - traefik.http.routers.bazarr-rtr.tls=true
      - traefik.http.routers.bazarr-rtr.rule=Host(`bazarr.${DOMAIN_NAME}`) || (Host(`${DOMAIN_NAME}`) && PathPrefix(`/bazarr`))
      - traefik.http.services.bazarr-svc.loadbalancer.server.port=6767
      - traefik.http.routers.bazarr-rtr.service=bazarr-svc
      - traefik.http.routers.bazarr-rtr.middlewares=rate-limit@docker
      - traefik.http.routers.bazarr-rtr.middlewares=secure-headers@docker
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/bazarr:/config
      - ${DATA_DIR}/media:/data
    # image: lscr.io/linuxserver/bazarr:development
    image: cr.hotio.dev/hotio/bazarr:nightly

  # bazarr - automatic download subtitles
  # Docs: https://hotio.dev/containers/bazarr/
  bazarr-4k:
    container_name: bazarr-4k
    restart: unless-stopped
    networks:
      apps: {}
    logging:
      driver: json-file
      options:
        max-file: ${DOCKERLOGGING_MAXFILE}
        max-size: ${DOCKERLOGGING_MAXSIZE}
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
      - DOCKER_MODS=ghcr.io/gilbn/theme.park:bazarr
      - TP_THEME=${TP_THEME}
      - TP_ADDON=bazarr-4k-logo
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/bazarr-4k:/config
      - ${DATA_DIR}/media:/data
    labels:
      - traefik.enable=true
      - traefik.http.routers.bazarr-4k-rtr.entrypoints=https
      - traefik.http.routers.bazarr-4k-rtr.tls=true
      - traefik.http.routers.bazarr-4k-rtr.rule=Host(`bazarr-4k.${DOMAIN_NAME}`) || (Host(`${DOMAIN_NAME}`) && PathPrefix(`/bazarr-4k`))
      - traefik.http.services.bazarr-4k-svc.loadbalancer.server.port=6767
      - traefik.http.routers.bazarr-4k-rtr.service=bazarr-4k-svc
      - traefik.http.routers.bazarr-4k-rtr.middlewares=rate-limit@docker
      - traefik.http.routers.bazarr-4k-rtr.middlewares=secure-headers@docker
      # - traefik.http.routers.bazarr-4k-rtr.middlewares=authelia@docker
      # ------------------------------------------------------------------------
    # image: lscr.io/linuxserver/bazarr:development
    image: cr.hotio.dev/hotio/bazarr:nightly

  # sonarr - TV Shows
  # Docker Image Docs: https://hotio.dev/containers/sonarr/
  # DOCS: https://wiki.servarr.com/en/sonarr
  sonarr:
    container_name: sonarr
    restart: unless-stopped
    networks:
      apps: {}
    logging:
      driver: json-file
      options:
        max-file: ${DOCKERLOGGING_MAXFILE}
        max-size: ${DOCKERLOGGING_MAXSIZE}
    depends_on:
      sabnzbd:
        condition: service_healthy
      qb:
        condition: service_healthy
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
      - DOCKER_MODS=ghcr.io/gilbn/theme.park:sonarr
      - TP_THEME=${TP_THEME}
    labels:
      - traefik.enable=true
      - traefik.http.routers.sonarr-rtr.entrypoints=https
      - traefik.http.routers.sonarr-rtr.tls=true
      - traefik.http.routers.sonarr-rtr.rule=Host(`sonarr.${DOMAIN_NAME}`) || (Host(`${DOMAIN_NAME}`) && PathPrefix(`/sonarr`))
      - traefik.http.services.sonarr-svc.loadbalancer.server.port=8989
      - traefik.http.routers.sonarr-rtr.service=sonarr-svc
      - traefik.http.routers.sonarr-rtr.middlewares=rate-limit@docker
      - traefik.http.routers.sonarr-rtr.middlewares=secure-headers@docker
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/sonarr:/config
      - ${DATA_DIR}:/data
    # image: lscr.io/linuxserver/sonarr:develop
    image: cr.hotio.dev/hotio/sonarr:nightly

  # sonarr - TV Shows
  # Docs: https://hotio.dev/containers/sonarr/
  sonarr-4k:
    container_name: sonarr-4k
    restart: unless-stopped
    networks:
      apps: {}
    logging:
      driver: json-file
      options:
        max-file: ${DOCKERLOGGING_MAXFILE}
        max-size: ${DOCKERLOGGING_MAXSIZE}
    depends_on:
      sabnzbd:
        condition: service_healthy
      qb:
        condition: service_healthy
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
      - DOCKER_MODS=ghcr.io/gilbn/theme.park:sonarr
      - TP_THEME=${TP_THEME}
      - TP_ADDON=sonarr-4k-logo
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/sonarr-4k:/config
      - ${DATA_DIR}:/data
    labels:
      - traefik.enable=true
      - traefik.http.routers.sonarr-4k-rtr.entrypoints=https
      - traefik.http.routers.sonarr-4k-rtr.tls=true
      - traefik.http.routers.sonarr-4k-rtr.rule=Host(`sonarr-4k.${DOMAIN_NAME}`) || (Host(`${DOMAIN_NAME}`) && PathPrefix(`/sonarr-4k`))
      - traefik.http.services.sonarr-4k-svc.loadbalancer.server.port=8989
      - traefik.http.routers.sonarr-4k-rtr.service=sonarr-4k-svc
      - traefik.http.routers.sonarr-4k-rtr.middlewares=rate-limit@docker
      - traefik.http.routers.sonarr-4k-rtr.middlewares=secure-headers@docker
      # - traefik.http.routers.sonarr-4k-rtr.middlewares=authelia@docker
      # ------------------------------------------------------------------------
    # image: lscr.io/linuxserver/sonarr:develop
    image: cr.hotio.dev/hotio/sonarr:nightly

  # radarr - Movies
  # Docker Image Docs: https://hotio.dev/containers/radarr/
  # DOCS: https://wiki.servarr.com/en/radarr
  radarr:
    container_name: radarr
    restart: unless-stopped
    networks:
      apps: {}
    logging:
      driver: json-file
      options:
        max-file: ${DOCKERLOGGING_MAXFILE}
        max-size: ${DOCKERLOGGING_MAXSIZE}
    depends_on:
      sabnzbd:
        condition: service_healthy
      qb:
        condition: service_healthy
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
      - DOCKER_MODS=ghcr.io/gilbn/theme.park:radarr
      - TP_THEME=${TP_THEME}
    labels:
      - traefik.enable=true
      - traefik.http.routers.radarr-rtr.entrypoints=https
      - traefik.http.routers.radarr-rtr.tls=true
      - traefik.http.routers.radarr-rtr.rule=Host(`radarr.${DOMAIN_NAME}`) || (Host(`${DOMAIN_NAME}`) && PathPrefix(`/radarr`))
      - traefik.http.services.radarr-svc.loadbalancer.server.port=7878
      - traefik.http.routers.radarr-rtr.service=radarr-svc
      - traefik.http.routers.radarr-rtr.middlewares=rate-limit@docker
      - traefik.http.routers.radarr-rtr.middlewares=secure-headers@docker
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/radarr:/config
      - ${DATA_DIR}:/data
    # image: lscr.io/linuxserver/radarr:nightly
    image: cr.hotio.dev/hotio/radarr:nightly

  # radarr - Movies
  # Docker Image Docs: https://hotio.dev/containers/radarr/
  # DOCS: https://wiki.servarr.com/en/radarr
  radarr-4k:
    container_name: radarr-4k
    restart: unless-stopped
    networks:
      apps: {}
    logging:
      driver: json-file
      options:
        max-file: ${DOCKERLOGGING_MAXFILE}
        max-size: ${DOCKERLOGGING_MAXSIZE}
    depends_on:
      sabnzbd:
        condition: service_healthy
      qb:
        condition: service_healthy
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
      - DOCKER_MODS=ghcr.io/gilbn/theme.park:radarr
      - TP_THEME=${TP_THEME}
      - TP_ADDON=radarr-4k-logo
    labels:
      - traefik.enable=true
      - traefik.http.routers.radarr-4k-rtr.entrypoints=https
      - traefik.http.routers.radarr-4k-rtr.tls=true
      - traefik.http.routers.radarr-4k-rtr.rule=Host(`radarr-4k.${DOMAIN_NAME}`) || (Host(`${DOMAIN_NAME}`) && PathPrefix(`/radarr-4k`))
      - traefik.http.services.radarr-4k-svc.loadbalancer.server.port=7878
      - traefik.http.routers.radarr-4k-rtr.service=radarr-4k-svc
      - traefik.http.routers.radarr-4k-rtr.middlewares=rate-limit@docker
      - traefik.http.routers.radarr-4k-rtr.middlewares=secure-headers@docker
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/radarr-4k:/config
      - ${DATA_DIR}:/data
    # image: lscr.io/linuxserver/radarr:nightly
    image: cr.hotio.dev/hotio/radarr:nightly

  # whisparr - Adult Movies
  # Docker Image Docs: https://hotio.dev/containers/whisparr/
  # DOCS: https://wiki.servarr.com/en/whisparr
  whisparr:
    container_name: whisparr
    restart: unless-stopped
    networks:
      apps: {}
    logging:
      driver: json-file
      options:
        max-file: ${DOCKERLOGGING_MAXFILE}
        max-size: ${DOCKERLOGGING_MAXSIZE}
    depends_on:
      sabnzbd:
        condition: service_healthy
      qb:
        condition: service_healthy
    environment:
      - TZ=${TZ}
      - UMASK=022
      - PUID=${PUID}
      - PGID=${PGID}
      - DOCKER_MODS=ghcr.io/gilbn/theme.park:whisparr
      - TP_THEME=${TP_THEME}
    labels:
      - traefik.enable=true
      - traefik.http.routers.whisparr-rtr.entrypoints=https
      - traefik.http.routers.whisparr-rtr.tls=true
      - traefik.http.routers.whisparr-rtr.rule=Host(`whisparr.${DOMAIN_NAME}`) || (Host(`${DOMAIN_NAME}`) && PathPrefix(`/whisparr`))
      - traefik.http.services.whisparr-svc.loadbalancer.server.port=6969
      - traefik.http.routers.whisparr-rtr.service=whisparr-svc
      - traefik.http.routers.whisparr-rtr.middlewares=rate-limit@docker
      - traefik.http.routers.whisparr-rtr.middlewares=secure-headers@docker
      # - traefik.http.routers.whisparr-rtr.middlewares=authelia@docker
      # ------------------------------------------------------------------------
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKER_DIR}/whisparr:/config
      - ${DATA_DIR}:/data
    image: cr.hotio.dev/hotio/whisparr:nightly

networks:
  apps:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/24
